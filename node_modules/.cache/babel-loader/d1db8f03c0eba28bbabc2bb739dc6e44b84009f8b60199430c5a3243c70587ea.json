{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, writeTask, h, Host } from '@stencil/core/internal/client';\nimport { c as config, b as getIonMode } from './ionic-global.js';\nimport { p as pointerCoord } from './helpers.js';\nimport { i as isRTL } from './dir.js';\nimport { c as createColorClasses, h as hostContext } from './theme.js';\nconst segmentIosCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.065);border-radius:8px;overflow:hidden;z-index:0}:host(.ion-color){background:rgba(var(--ion-color-base-rgb), 0.065)}:host(.in-toolbar){margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;width:auto}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-toolbar){margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host(.in-toolbar:not(.ion-color)){background:var(--ion-toolbar-segment-background, var(--background))}:host(.in-toolbar-color:not(.ion-color)){background:rgba(var(--ion-color-contrast-rgb), 0.11)}\";\nconst segmentMdCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:transparent}:host(.in-toolbar){min-height:var(--min-height)}:host(.segment-scrollable) ::slotted(ion-segment-button){min-width:auto}\";\nconst Segment = /*@__PURE__*/proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionSelect = createEvent(this, \"ionSelect\", 7);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    this.didInit = false;\n    this.activated = false;\n    /**\n     * If `true`, the user cannot interact with the segment.\n     */\n    this.disabled = false;\n    /**\n     * If `true`, the segment buttons will overflow and the user can swipe to see them.\n     * In addition, this will disable the gesture to drag the indicator between the buttons\n     * in order to swipe to see hidden buttons.\n     */\n    this.scrollable = false;\n    /**\n     * If `true`, users will be able to swipe between segment buttons to activate them.\n     */\n    this.swipeGesture = true;\n    /**\n     * If `true`, navigating to an `ion-segment-button` with the keyboard will focus and select the element.\n     * If `false`, keyboard navigation will only focus the `ion-segment-button` element.\n     */\n    this.selectOnFocus = false;\n    this.onClick = ev => {\n      const current = ev.target;\n      const previous = this.checked;\n      // If the current element is a segment then that means\n      // the user tried to swipe to a segment button and\n      // click a segment button at the same time so we should\n      // not update the checked segment button\n      if (current.tagName === 'ION-SEGMENT') {\n        return;\n      }\n      this.value = current.value;\n      if (this.scrollable || !this.swipeGesture) {\n        if (previous) {\n          this.checkButton(previous, current);\n        } else {\n          this.setCheckedClasses();\n        }\n      }\n      this.checked = current;\n    };\n    this.getSegmentButton = selector => {\n      var _a, _b;\n      const buttons = this.getButtons().filter(button => !button.disabled);\n      const currIndex = buttons.findIndex(button => button === document.activeElement);\n      switch (selector) {\n        case 'first':\n          return buttons[0];\n        case 'last':\n          return buttons[buttons.length - 1];\n        case 'next':\n          return (_a = buttons[currIndex + 1]) !== null && _a !== void 0 ? _a : buttons[0];\n        case 'previous':\n          return (_b = buttons[currIndex - 1]) !== null && _b !== void 0 ? _b : buttons[buttons.length - 1];\n        default:\n          return null;\n      }\n    };\n  }\n  colorChanged(value, oldValue) {\n    /**\n     * If color is set after not having\n     * previously been set (or vice versa),\n     * we need to emit style so the segment-buttons\n     * can apply their color classes properly.\n     */\n    if (oldValue === undefined && value !== undefined || oldValue !== undefined && value === undefined) {\n      this.emitStyle();\n    }\n  }\n  swipeGestureChanged() {\n    this.gestureChanged();\n  }\n  valueChanged(value, oldValue) {\n    this.ionSelect.emit({\n      value\n    });\n    if (oldValue !== '' || this.didInit) {\n      if (!this.activated) {\n        this.ionChange.emit({\n          value\n        });\n      } else {\n        this.valueAfterGesture = value;\n      }\n    }\n    if (this.scrollable) {\n      const buttons = this.getButtons();\n      const activeButton = buttons.find(button => button.value === value);\n      if (activeButton !== undefined) {\n        /**\n         * Scrollable segment buttons should be\n         * centered within the view including\n         * buttons that are partially offscreen.\n         */\n        activeButton.scrollIntoView({\n          behavior: 'smooth',\n          inline: 'center',\n          /**\n           * Segment should scroll on the\n           * horizontal axis. `block: 'nearest'`\n           * ensures that the vertical axis\n           * does not scroll if the segment\n           * as a whole is already in view.\n           */\n          block: 'nearest'\n        });\n      }\n    }\n  }\n  disabledChanged() {\n    this.gestureChanged();\n    const buttons = this.getButtons();\n    for (const button of buttons) {\n      button.disabled = this.disabled;\n    }\n  }\n  gestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(!this.scrollable && !this.disabled && this.swipeGesture);\n    }\n  }\n  connectedCallback() {\n    this.emitStyle();\n  }\n  componentWillLoad() {\n    this.emitStyle();\n  }\n  async componentDidLoad() {\n    this.setCheckedClasses();\n    this.gesture = (await import('./index2.js')).createGesture({\n      el: this.el,\n      gestureName: 'segment',\n      gesturePriority: 100,\n      threshold: 0,\n      passive: false,\n      onStart: ev => this.onStart(ev),\n      onMove: ev => this.onMove(ev),\n      onEnd: ev => this.onEnd(ev)\n    });\n    this.gestureChanged();\n    if (this.disabled) {\n      this.disabledChanged();\n    }\n    this.didInit = true;\n  }\n  onStart(detail) {\n    this.activate(detail);\n  }\n  onMove(detail) {\n    this.setNextIndex(detail);\n  }\n  onEnd(detail) {\n    this.setActivated(false);\n    const checkedValidButton = this.setNextIndex(detail, true);\n    detail.event.stopImmediatePropagation();\n    if (checkedValidButton) {\n      this.addRipple(detail);\n    }\n    const value = this.valueAfterGesture;\n    if (value !== undefined) {\n      this.ionChange.emit({\n        value\n      });\n      this.valueAfterGesture = undefined;\n    }\n  }\n  getButtons() {\n    return Array.from(this.el.querySelectorAll('ion-segment-button'));\n  }\n  /**\n   * The gesture blocks the segment button ripple. This\n   * function adds the ripple based on the checked segment\n   * and where the cursor ended.\n   */\n  addRipple(detail) {\n    const useRippleEffect = config.getBoolean('animated', true) && config.getBoolean('rippleEffect', true);\n    if (!useRippleEffect) {\n      return;\n    }\n    const buttons = this.getButtons();\n    const checked = buttons.find(button => button.value === this.value);\n    const root = checked.shadowRoot || checked;\n    const ripple = root.querySelector('ion-ripple-effect');\n    if (!ripple) {\n      return;\n    }\n    const {\n      x,\n      y\n    } = pointerCoord(detail.event);\n    ripple.addRipple(x, y).then(remove => remove());\n  }\n  /*\n   * Activate both the segment and the buttons\n   * due to a bug with ::slotted in Safari\n   */\n  setActivated(activated) {\n    const buttons = this.getButtons();\n    buttons.forEach(button => {\n      if (activated) {\n        button.classList.add('segment-button-activated');\n      } else {\n        button.classList.remove('segment-button-activated');\n      }\n    });\n    this.activated = activated;\n  }\n  activate(detail) {\n    const clicked = detail.event.target;\n    const buttons = this.getButtons();\n    const checked = buttons.find(button => button.value === this.value);\n    // Make sure we are only checking for activation on a segment button\n    // since disabled buttons will get the click on the segment\n    if (clicked.tagName !== 'ION-SEGMENT-BUTTON') {\n      return;\n    }\n    // If there are no checked buttons, set the current button to checked\n    if (!checked) {\n      this.value = clicked.value;\n      this.setCheckedClasses();\n    }\n    // If the gesture began on the clicked button with the indicator\n    // then we should activate the indicator\n    if (this.value === clicked.value) {\n      this.setActivated(true);\n    }\n  }\n  getIndicator(button) {\n    const root = button.shadowRoot || button;\n    return root.querySelector('.segment-button-indicator');\n  }\n  checkButton(previous, current) {\n    const previousIndicator = this.getIndicator(previous);\n    const currentIndicator = this.getIndicator(current);\n    if (previousIndicator === null || currentIndicator === null) {\n      return;\n    }\n    const previousClientRect = previousIndicator.getBoundingClientRect();\n    const currentClientRect = currentIndicator.getBoundingClientRect();\n    const widthDelta = previousClientRect.width / currentClientRect.width;\n    const xPosition = previousClientRect.left - currentClientRect.left;\n    // Scale the indicator width to match the previous indicator width\n    // and translate it on top of the previous indicator\n    const transform = `translate3d(${xPosition}px, 0, 0) scaleX(${widthDelta})`;\n    writeTask(() => {\n      // Remove the transition before positioning on top of the previous indicator\n      currentIndicator.classList.remove('segment-button-indicator-animated');\n      currentIndicator.style.setProperty('transform', transform);\n      // Force a repaint to ensure the transform happens\n      currentIndicator.getBoundingClientRect();\n      // Add the transition to move the indicator into place\n      currentIndicator.classList.add('segment-button-indicator-animated');\n      // Remove the transform to slide the indicator back to the button clicked\n      currentIndicator.style.setProperty('transform', '');\n    });\n    this.value = current.value;\n    this.setCheckedClasses();\n  }\n  setCheckedClasses() {\n    const buttons = this.getButtons();\n    const index = buttons.findIndex(button => button.value === this.value);\n    const next = index + 1;\n    // Keep track of the currently checked button\n    this.checked = buttons.find(button => button.value === this.value);\n    for (const button of buttons) {\n      button.classList.remove('segment-button-after-checked');\n    }\n    if (next < buttons.length) {\n      buttons[next].classList.add('segment-button-after-checked');\n    }\n  }\n  setNextIndex(detail) {\n    let isEnd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const rtl = isRTL(this.el);\n    const activated = this.activated;\n    const buttons = this.getButtons();\n    const index = buttons.findIndex(button => button.value === this.value);\n    const previous = buttons[index];\n    let current;\n    let nextIndex;\n    if (index === -1) {\n      return;\n    }\n    // Get the element that the touch event started on in case\n    // it was the checked button, then we will move the indicator\n    const rect = previous.getBoundingClientRect();\n    const left = rect.left;\n    const width = rect.width;\n    // Get the element that the gesture is on top of based on the currentX of the\n    // gesture event and the Y coordinate of the starting element, since the gesture\n    // can move up and down off of the segment\n    const currentX = detail.currentX;\n    const previousY = rect.top + rect.height / 2;\n    /**\n     * Segment can be used inside the shadow dom\n     * so doing document.elementFromPoint would never\n     * return a segment button in that instance.\n     * We use getRootNode to which will return the parent\n     * shadow root if used inside a shadow component and\n     * returns document otherwise.\n     */\n    const root = this.el.getRootNode();\n    const nextEl = root.elementFromPoint(currentX, previousY);\n    const decreaseIndex = rtl ? currentX > left + width : currentX < left;\n    const increaseIndex = rtl ? currentX < left : currentX > left + width;\n    // If the indicator is currently activated then we have started the gesture\n    // on top of the checked button so we need to slide the indicator\n    // by checking the button next to it as we move\n    if (activated && !isEnd) {\n      // Decrease index, move left in LTR & right in RTL\n      if (decreaseIndex) {\n        const newIndex = index - 1;\n        if (newIndex >= 0) {\n          nextIndex = newIndex;\n        }\n        // Increase index, moves right in LTR & left in RTL\n      } else if (increaseIndex) {\n        if (activated && !isEnd) {\n          const newIndex = index + 1;\n          if (newIndex < buttons.length) {\n            nextIndex = newIndex;\n          }\n        }\n      }\n      if (nextIndex !== undefined && !buttons[nextIndex].disabled) {\n        current = buttons[nextIndex];\n      }\n    }\n    // If the indicator is not activated then we will just set the indicator\n    // to the element where the gesture ended\n    if (!activated && isEnd) {\n      current = nextEl;\n    }\n    if (current != null) {\n      /**\n       * If current element is ion-segment then that means\n       * user tried to select a disabled ion-segment-button,\n       * and we should not update the ripple.\n       */\n      if (current.tagName === 'ION-SEGMENT') {\n        return false;\n      }\n      if (previous !== current) {\n        this.checkButton(previous, current);\n      }\n    }\n    return true;\n  }\n  emitStyle() {\n    this.ionStyle.emit({\n      segment: true\n    });\n  }\n  onKeyDown(ev) {\n    const rtl = isRTL(this.el);\n    let keyDownSelectsButton = this.selectOnFocus;\n    let current;\n    switch (ev.key) {\n      case 'ArrowRight':\n        ev.preventDefault();\n        current = rtl ? this.getSegmentButton('previous') : this.getSegmentButton('next');\n        break;\n      case 'ArrowLeft':\n        ev.preventDefault();\n        current = rtl ? this.getSegmentButton('next') : this.getSegmentButton('previous');\n        break;\n      case 'Home':\n        ev.preventDefault();\n        current = this.getSegmentButton('first');\n        break;\n      case 'End':\n        ev.preventDefault();\n        current = this.getSegmentButton('last');\n        break;\n      case ' ':\n      case 'Enter':\n        ev.preventDefault();\n        current = document.activeElement;\n        keyDownSelectsButton = true;\n    }\n    if (!current) {\n      return;\n    }\n    if (keyDownSelectsButton) {\n      const previous = this.checked || current;\n      this.checkButton(previous, current);\n    }\n    current.setFocus();\n  }\n  render() {\n    const mode = getIonMode(this);\n    return h(Host, {\n      role: \"tablist\",\n      onClick: this.onClick,\n      class: createColorClasses(this.color, {\n        [mode]: true,\n        'in-toolbar': hostContext('ion-toolbar', this.el),\n        'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n        'segment-activated': this.activated,\n        'segment-disabled': this.disabled,\n        'segment-scrollable': this.scrollable\n      })\n    }, h(\"slot\", null));\n  }\n  get el() {\n    return this;\n  }\n  static get watchers() {\n    return {\n      \"color\": [\"colorChanged\"],\n      \"swipeGesture\": [\"swipeGestureChanged\"],\n      \"value\": [\"valueChanged\"],\n      \"disabled\": [\"disabledChanged\"]\n    };\n  }\n  static get style() {\n    return {\n      ios: segmentIosCss,\n      md: segmentMdCss\n    };\n  }\n}, [33, \"ion-segment\", {\n  \"color\": [513],\n  \"disabled\": [4],\n  \"scrollable\": [4],\n  \"swipeGesture\": [4, \"swipe-gesture\"],\n  \"value\": [1025],\n  \"selectOnFocus\": [4, \"select-on-focus\"],\n  \"activated\": [32]\n}, [[0, \"keydown\", \"onKeyDown\"]]]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-segment\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-segment\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Segment);\n        }\n        break;\n    }\n  });\n}\nconst IonSegment = Segment;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonSegment, defineCustomElement };","map":{"version":3,"names":["proxyCustomElement","HTMLElement","createEvent","writeTask","h","Host","c","config","b","getIonMode","p","pointerCoord","i","isRTL","createColorClasses","hostContext","segmentIosCss","segmentMdCss","Segment","constructor","__registerHost","__attachShadow","ionChange","ionSelect","ionStyle","didInit","activated","disabled","scrollable","swipeGesture","selectOnFocus","onClick","ev","current","target","previous","checked","tagName","value","checkButton","setCheckedClasses","getSegmentButton","selector","_a","_b","buttons","getButtons","filter","button","currIndex","findIndex","document","activeElement","length","colorChanged","oldValue","undefined","emitStyle","swipeGestureChanged","gestureChanged","valueChanged","emit","valueAfterGesture","activeButton","find","scrollIntoView","behavior","inline","block","disabledChanged","gesture","enable","connectedCallback","componentWillLoad","componentDidLoad","createGesture","el","gestureName","gesturePriority","threshold","passive","onStart","onMove","onEnd","detail","activate","setNextIndex","setActivated","checkedValidButton","event","stopImmediatePropagation","addRipple","Array","from","querySelectorAll","useRippleEffect","getBoolean","root","shadowRoot","ripple","querySelector","x","y","then","remove","forEach","classList","add","clicked","getIndicator","previousIndicator","currentIndicator","previousClientRect","getBoundingClientRect","currentClientRect","widthDelta","width","xPosition","left","transform","style","setProperty","index","next","isEnd","arguments","rtl","nextIndex","rect","currentX","previousY","top","height","getRootNode","nextEl","elementFromPoint","decreaseIndex","increaseIndex","newIndex","segment","onKeyDown","keyDownSelectsButton","key","preventDefault","setFocus","render","mode","role","class","color","watchers","ios","md","defineCustomElement$1","customElements","components","get","define","IonSegment","defineCustomElement"],"sources":["/Users/aliciamedina/Library/Mobile Documents/com~apple~CloudDocs/Work/Proyecto Fin Grado/Electron/Ionic/Chatty-iOS/node_modules/@ionic/core/components/ion-segment.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, writeTask, h, Host } from '@stencil/core/internal/client';\nimport { c as config, b as getIonMode } from './ionic-global.js';\nimport { p as pointerCoord } from './helpers.js';\nimport { i as isRTL } from './dir.js';\nimport { c as createColorClasses, h as hostContext } from './theme.js';\n\nconst segmentIosCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.065);border-radius:8px;overflow:hidden;z-index:0}:host(.ion-color){background:rgba(var(--ion-color-base-rgb), 0.065)}:host(.in-toolbar){margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;width:auto}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-toolbar){margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host(.in-toolbar:not(.ion-color)){background:var(--ion-toolbar-segment-background, var(--background))}:host(.in-toolbar-color:not(.ion-color)){background:rgba(var(--ion-color-contrast-rgb), 0.11)}\";\n\nconst segmentMdCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:transparent}:host(.in-toolbar){min-height:var(--min-height)}:host(.segment-scrollable) ::slotted(ion-segment-button){min-width:auto}\";\n\nconst Segment = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionSelect = createEvent(this, \"ionSelect\", 7);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    this.didInit = false;\n    this.activated = false;\n    /**\n     * If `true`, the user cannot interact with the segment.\n     */\n    this.disabled = false;\n    /**\n     * If `true`, the segment buttons will overflow and the user can swipe to see them.\n     * In addition, this will disable the gesture to drag the indicator between the buttons\n     * in order to swipe to see hidden buttons.\n     */\n    this.scrollable = false;\n    /**\n     * If `true`, users will be able to swipe between segment buttons to activate them.\n     */\n    this.swipeGesture = true;\n    /**\n     * If `true`, navigating to an `ion-segment-button` with the keyboard will focus and select the element.\n     * If `false`, keyboard navigation will only focus the `ion-segment-button` element.\n     */\n    this.selectOnFocus = false;\n    this.onClick = (ev) => {\n      const current = ev.target;\n      const previous = this.checked;\n      // If the current element is a segment then that means\n      // the user tried to swipe to a segment button and\n      // click a segment button at the same time so we should\n      // not update the checked segment button\n      if (current.tagName === 'ION-SEGMENT') {\n        return;\n      }\n      this.value = current.value;\n      if (this.scrollable || !this.swipeGesture) {\n        if (previous) {\n          this.checkButton(previous, current);\n        }\n        else {\n          this.setCheckedClasses();\n        }\n      }\n      this.checked = current;\n    };\n    this.getSegmentButton = (selector) => {\n      var _a, _b;\n      const buttons = this.getButtons().filter((button) => !button.disabled);\n      const currIndex = buttons.findIndex((button) => button === document.activeElement);\n      switch (selector) {\n        case 'first':\n          return buttons[0];\n        case 'last':\n          return buttons[buttons.length - 1];\n        case 'next':\n          return (_a = buttons[currIndex + 1]) !== null && _a !== void 0 ? _a : buttons[0];\n        case 'previous':\n          return (_b = buttons[currIndex - 1]) !== null && _b !== void 0 ? _b : buttons[buttons.length - 1];\n        default:\n          return null;\n      }\n    };\n  }\n  colorChanged(value, oldValue) {\n    /**\n     * If color is set after not having\n     * previously been set (or vice versa),\n     * we need to emit style so the segment-buttons\n     * can apply their color classes properly.\n     */\n    if ((oldValue === undefined && value !== undefined) || (oldValue !== undefined && value === undefined)) {\n      this.emitStyle();\n    }\n  }\n  swipeGestureChanged() {\n    this.gestureChanged();\n  }\n  valueChanged(value, oldValue) {\n    this.ionSelect.emit({ value });\n    if (oldValue !== '' || this.didInit) {\n      if (!this.activated) {\n        this.ionChange.emit({ value });\n      }\n      else {\n        this.valueAfterGesture = value;\n      }\n    }\n    if (this.scrollable) {\n      const buttons = this.getButtons();\n      const activeButton = buttons.find((button) => button.value === value);\n      if (activeButton !== undefined) {\n        /**\n         * Scrollable segment buttons should be\n         * centered within the view including\n         * buttons that are partially offscreen.\n         */\n        activeButton.scrollIntoView({\n          behavior: 'smooth',\n          inline: 'center',\n          /**\n           * Segment should scroll on the\n           * horizontal axis. `block: 'nearest'`\n           * ensures that the vertical axis\n           * does not scroll if the segment\n           * as a whole is already in view.\n           */\n          block: 'nearest',\n        });\n      }\n    }\n  }\n  disabledChanged() {\n    this.gestureChanged();\n    const buttons = this.getButtons();\n    for (const button of buttons) {\n      button.disabled = this.disabled;\n    }\n  }\n  gestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(!this.scrollable && !this.disabled && this.swipeGesture);\n    }\n  }\n  connectedCallback() {\n    this.emitStyle();\n  }\n  componentWillLoad() {\n    this.emitStyle();\n  }\n  async componentDidLoad() {\n    this.setCheckedClasses();\n    this.gesture = (await import('./index2.js')).createGesture({\n      el: this.el,\n      gestureName: 'segment',\n      gesturePriority: 100,\n      threshold: 0,\n      passive: false,\n      onStart: (ev) => this.onStart(ev),\n      onMove: (ev) => this.onMove(ev),\n      onEnd: (ev) => this.onEnd(ev),\n    });\n    this.gestureChanged();\n    if (this.disabled) {\n      this.disabledChanged();\n    }\n    this.didInit = true;\n  }\n  onStart(detail) {\n    this.activate(detail);\n  }\n  onMove(detail) {\n    this.setNextIndex(detail);\n  }\n  onEnd(detail) {\n    this.setActivated(false);\n    const checkedValidButton = this.setNextIndex(detail, true);\n    detail.event.stopImmediatePropagation();\n    if (checkedValidButton) {\n      this.addRipple(detail);\n    }\n    const value = this.valueAfterGesture;\n    if (value !== undefined) {\n      this.ionChange.emit({ value });\n      this.valueAfterGesture = undefined;\n    }\n  }\n  getButtons() {\n    return Array.from(this.el.querySelectorAll('ion-segment-button'));\n  }\n  /**\n   * The gesture blocks the segment button ripple. This\n   * function adds the ripple based on the checked segment\n   * and where the cursor ended.\n   */\n  addRipple(detail) {\n    const useRippleEffect = config.getBoolean('animated', true) && config.getBoolean('rippleEffect', true);\n    if (!useRippleEffect) {\n      return;\n    }\n    const buttons = this.getButtons();\n    const checked = buttons.find((button) => button.value === this.value);\n    const root = checked.shadowRoot || checked;\n    const ripple = root.querySelector('ion-ripple-effect');\n    if (!ripple) {\n      return;\n    }\n    const { x, y } = pointerCoord(detail.event);\n    ripple.addRipple(x, y).then((remove) => remove());\n  }\n  /*\n   * Activate both the segment and the buttons\n   * due to a bug with ::slotted in Safari\n   */\n  setActivated(activated) {\n    const buttons = this.getButtons();\n    buttons.forEach((button) => {\n      if (activated) {\n        button.classList.add('segment-button-activated');\n      }\n      else {\n        button.classList.remove('segment-button-activated');\n      }\n    });\n    this.activated = activated;\n  }\n  activate(detail) {\n    const clicked = detail.event.target;\n    const buttons = this.getButtons();\n    const checked = buttons.find((button) => button.value === this.value);\n    // Make sure we are only checking for activation on a segment button\n    // since disabled buttons will get the click on the segment\n    if (clicked.tagName !== 'ION-SEGMENT-BUTTON') {\n      return;\n    }\n    // If there are no checked buttons, set the current button to checked\n    if (!checked) {\n      this.value = clicked.value;\n      this.setCheckedClasses();\n    }\n    // If the gesture began on the clicked button with the indicator\n    // then we should activate the indicator\n    if (this.value === clicked.value) {\n      this.setActivated(true);\n    }\n  }\n  getIndicator(button) {\n    const root = button.shadowRoot || button;\n    return root.querySelector('.segment-button-indicator');\n  }\n  checkButton(previous, current) {\n    const previousIndicator = this.getIndicator(previous);\n    const currentIndicator = this.getIndicator(current);\n    if (previousIndicator === null || currentIndicator === null) {\n      return;\n    }\n    const previousClientRect = previousIndicator.getBoundingClientRect();\n    const currentClientRect = currentIndicator.getBoundingClientRect();\n    const widthDelta = previousClientRect.width / currentClientRect.width;\n    const xPosition = previousClientRect.left - currentClientRect.left;\n    // Scale the indicator width to match the previous indicator width\n    // and translate it on top of the previous indicator\n    const transform = `translate3d(${xPosition}px, 0, 0) scaleX(${widthDelta})`;\n    writeTask(() => {\n      // Remove the transition before positioning on top of the previous indicator\n      currentIndicator.classList.remove('segment-button-indicator-animated');\n      currentIndicator.style.setProperty('transform', transform);\n      // Force a repaint to ensure the transform happens\n      currentIndicator.getBoundingClientRect();\n      // Add the transition to move the indicator into place\n      currentIndicator.classList.add('segment-button-indicator-animated');\n      // Remove the transform to slide the indicator back to the button clicked\n      currentIndicator.style.setProperty('transform', '');\n    });\n    this.value = current.value;\n    this.setCheckedClasses();\n  }\n  setCheckedClasses() {\n    const buttons = this.getButtons();\n    const index = buttons.findIndex((button) => button.value === this.value);\n    const next = index + 1;\n    // Keep track of the currently checked button\n    this.checked = buttons.find((button) => button.value === this.value);\n    for (const button of buttons) {\n      button.classList.remove('segment-button-after-checked');\n    }\n    if (next < buttons.length) {\n      buttons[next].classList.add('segment-button-after-checked');\n    }\n  }\n  setNextIndex(detail, isEnd = false) {\n    const rtl = isRTL(this.el);\n    const activated = this.activated;\n    const buttons = this.getButtons();\n    const index = buttons.findIndex((button) => button.value === this.value);\n    const previous = buttons[index];\n    let current;\n    let nextIndex;\n    if (index === -1) {\n      return;\n    }\n    // Get the element that the touch event started on in case\n    // it was the checked button, then we will move the indicator\n    const rect = previous.getBoundingClientRect();\n    const left = rect.left;\n    const width = rect.width;\n    // Get the element that the gesture is on top of based on the currentX of the\n    // gesture event and the Y coordinate of the starting element, since the gesture\n    // can move up and down off of the segment\n    const currentX = detail.currentX;\n    const previousY = rect.top + rect.height / 2;\n    /**\n     * Segment can be used inside the shadow dom\n     * so doing document.elementFromPoint would never\n     * return a segment button in that instance.\n     * We use getRootNode to which will return the parent\n     * shadow root if used inside a shadow component and\n     * returns document otherwise.\n     */\n    const root = this.el.getRootNode();\n    const nextEl = root.elementFromPoint(currentX, previousY);\n    const decreaseIndex = rtl ? currentX > left + width : currentX < left;\n    const increaseIndex = rtl ? currentX < left : currentX > left + width;\n    // If the indicator is currently activated then we have started the gesture\n    // on top of the checked button so we need to slide the indicator\n    // by checking the button next to it as we move\n    if (activated && !isEnd) {\n      // Decrease index, move left in LTR & right in RTL\n      if (decreaseIndex) {\n        const newIndex = index - 1;\n        if (newIndex >= 0) {\n          nextIndex = newIndex;\n        }\n        // Increase index, moves right in LTR & left in RTL\n      }\n      else if (increaseIndex) {\n        if (activated && !isEnd) {\n          const newIndex = index + 1;\n          if (newIndex < buttons.length) {\n            nextIndex = newIndex;\n          }\n        }\n      }\n      if (nextIndex !== undefined && !buttons[nextIndex].disabled) {\n        current = buttons[nextIndex];\n      }\n    }\n    // If the indicator is not activated then we will just set the indicator\n    // to the element where the gesture ended\n    if (!activated && isEnd) {\n      current = nextEl;\n    }\n    if (current != null) {\n      /**\n       * If current element is ion-segment then that means\n       * user tried to select a disabled ion-segment-button,\n       * and we should not update the ripple.\n       */\n      if (current.tagName === 'ION-SEGMENT') {\n        return false;\n      }\n      if (previous !== current) {\n        this.checkButton(previous, current);\n      }\n    }\n    return true;\n  }\n  emitStyle() {\n    this.ionStyle.emit({\n      segment: true,\n    });\n  }\n  onKeyDown(ev) {\n    const rtl = isRTL(this.el);\n    let keyDownSelectsButton = this.selectOnFocus;\n    let current;\n    switch (ev.key) {\n      case 'ArrowRight':\n        ev.preventDefault();\n        current = rtl ? this.getSegmentButton('previous') : this.getSegmentButton('next');\n        break;\n      case 'ArrowLeft':\n        ev.preventDefault();\n        current = rtl ? this.getSegmentButton('next') : this.getSegmentButton('previous');\n        break;\n      case 'Home':\n        ev.preventDefault();\n        current = this.getSegmentButton('first');\n        break;\n      case 'End':\n        ev.preventDefault();\n        current = this.getSegmentButton('last');\n        break;\n      case ' ':\n      case 'Enter':\n        ev.preventDefault();\n        current = document.activeElement;\n        keyDownSelectsButton = true;\n    }\n    if (!current) {\n      return;\n    }\n    if (keyDownSelectsButton) {\n      const previous = this.checked || current;\n      this.checkButton(previous, current);\n    }\n    current.setFocus();\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { role: \"tablist\", onClick: this.onClick, class: createColorClasses(this.color, {\n        [mode]: true,\n        'in-toolbar': hostContext('ion-toolbar', this.el),\n        'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n        'segment-activated': this.activated,\n        'segment-disabled': this.disabled,\n        'segment-scrollable': this.scrollable,\n      }) }, h(\"slot\", null)));\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"color\": [\"colorChanged\"],\n    \"swipeGesture\": [\"swipeGestureChanged\"],\n    \"value\": [\"valueChanged\"],\n    \"disabled\": [\"disabledChanged\"]\n  }; }\n  static get style() { return {\n    ios: segmentIosCss,\n    md: segmentMdCss\n  }; }\n}, [33, \"ion-segment\", {\n    \"color\": [513],\n    \"disabled\": [4],\n    \"scrollable\": [4],\n    \"swipeGesture\": [4, \"swipe-gesture\"],\n    \"value\": [1025],\n    \"selectOnFocus\": [4, \"select-on-focus\"],\n    \"activated\": [32]\n  }, [[0, \"keydown\", \"onKeyDown\"]]]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-segment\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-segment\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Segment);\n      }\n      break;\n  } });\n}\n\nconst IonSegment = Segment;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonSegment, defineCustomElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}