{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { c as createColorClasses, h as hostContext } from './theme.js';\nconst breadcrumbsIosCss = \":host{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center}:host(.in-toolbar-color),:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator ion-icon{color:var(--ion-color-contrast)}:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator{background:rgba(var(--ion-color-contrast-rgb), 0.11)}:host(.in-toolbar){padding-left:20px;padding-right:20px;padding-top:0;padding-bottom:0;-ms-flex-pack:center;justify-content:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-toolbar){padding-left:unset;padding-right:unset;-webkit-padding-start:20px;padding-inline-start:20px;-webkit-padding-end:20px;padding-inline-end:20px}}\";\nconst breadcrumbsMdCss = \":host{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center}:host(.in-toolbar-color),:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator ion-icon{color:var(--ion-color-contrast)}:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator{background:rgba(var(--ion-color-contrast-rgb), 0.11)}:host(.in-toolbar){padding-left:8px;padding-right:8px;padding-top:0;padding-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-toolbar){padding-left:unset;padding-right:unset;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px}}\";\nconst Breadcrumbs = /*@__PURE__*/proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionCollapsedClick = createEvent(this, \"ionCollapsedClick\", 7);\n    /**\n     * The number of breadcrumbs to show before the collapsed indicator.\n     * If `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`,\n     * the breadcrumbs will not be collapsed.\n     */\n    this.itemsBeforeCollapse = 1;\n    /**\n     * The number of breadcrumbs to show after the collapsed indicator.\n     * If `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`,\n     * the breadcrumbs will not be collapsed.\n     */\n    this.itemsAfterCollapse = 1;\n    this.breadcrumbsInit = () => {\n      this.setBreadcrumbSeparator();\n      this.setMaxItems();\n    };\n    this.resetActiveBreadcrumb = () => {\n      const breadcrumbs = this.getBreadcrumbs();\n      // Only reset the active breadcrumb if we were the ones to change it\n      // otherwise use the one set on the component\n      const activeBreadcrumb = breadcrumbs.find(breadcrumb => breadcrumb.active);\n      if (activeBreadcrumb && this.activeChanged) {\n        activeBreadcrumb.active = false;\n      }\n    };\n    this.setMaxItems = () => {\n      const {\n        itemsAfterCollapse,\n        itemsBeforeCollapse,\n        maxItems\n      } = this;\n      const breadcrumbs = this.getBreadcrumbs();\n      for (const breadcrumb of breadcrumbs) {\n        breadcrumb.showCollapsedIndicator = false;\n        breadcrumb.collapsed = false;\n      }\n      // If the number of breadcrumbs exceeds the maximum number of items\n      // that should show and the items before / after collapse do not\n      // exceed the maximum items then we need to collapse the breadcrumbs\n      const shouldCollapse = maxItems !== undefined && breadcrumbs.length > maxItems && itemsBeforeCollapse + itemsAfterCollapse <= maxItems;\n      if (shouldCollapse) {\n        // Show the collapsed indicator in the first breadcrumb that collapses\n        breadcrumbs.forEach((breadcrumb, index) => {\n          if (index === itemsBeforeCollapse) {\n            breadcrumb.showCollapsedIndicator = true;\n          }\n          // Collapse all breadcrumbs that have an index greater than or equal to\n          // the number before collapse and an index less than the total number\n          // of breadcrumbs minus the items that should show after the collapse\n          if (index >= itemsBeforeCollapse && index < breadcrumbs.length - itemsAfterCollapse) {\n            breadcrumb.collapsed = true;\n          }\n        });\n      }\n    };\n    this.setBreadcrumbSeparator = () => {\n      const {\n        itemsAfterCollapse,\n        itemsBeforeCollapse,\n        maxItems\n      } = this;\n      const breadcrumbs = this.getBreadcrumbs();\n      // Check if an active breadcrumb exists already\n      const active = breadcrumbs.find(breadcrumb => breadcrumb.active);\n      // Set the separator on all but the last breadcrumb\n      for (const breadcrumb of breadcrumbs) {\n        // The only time the last breadcrumb changes is when\n        // itemsAfterCollapse is set to 0, in this case the\n        // last breadcrumb will be the collapsed indicator\n        const last = maxItems !== undefined && itemsAfterCollapse === 0 ? breadcrumb === breadcrumbs[itemsBeforeCollapse] : breadcrumb === breadcrumbs[breadcrumbs.length - 1];\n        breadcrumb.last = last;\n        // If the breadcrumb has defined whether or not to show the\n        // separator then use that value, otherwise check if it's the\n        // last breadcrumb\n        const separator = breadcrumb.separator !== undefined ? breadcrumb.separator : last ? undefined : true;\n        breadcrumb.separator = separator;\n        // If there is not an active breadcrumb already\n        // set the last one to active\n        if (!active && last) {\n          breadcrumb.active = true;\n          this.activeChanged = true;\n        }\n      }\n    };\n    this.getBreadcrumbs = () => {\n      return Array.from(this.el.querySelectorAll('ion-breadcrumb'));\n    };\n    this.slotChanged = () => {\n      this.resetActiveBreadcrumb();\n      this.breadcrumbsInit();\n    };\n  }\n  onCollapsedClick(ev) {\n    const breadcrumbs = this.getBreadcrumbs();\n    const collapsedBreadcrumbs = breadcrumbs.filter(breadcrumb => breadcrumb.collapsed);\n    this.ionCollapsedClick.emit(Object.assign(Object.assign({}, ev.detail), {\n      collapsedBreadcrumbs\n    }));\n  }\n  maxItemsChanged() {\n    this.resetActiveBreadcrumb();\n    this.breadcrumbsInit();\n  }\n  componentWillLoad() {\n    this.breadcrumbsInit();\n  }\n  render() {\n    const {\n      color,\n      collapsed\n    } = this;\n    const mode = getIonMode(this);\n    return h(Host, {\n      class: createColorClasses(color, {\n        [mode]: true,\n        'in-toolbar': hostContext('ion-toolbar', this.el),\n        'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n        'breadcrumbs-collapsed': collapsed\n      })\n    }, h(\"slot\", {\n      onSlotchange: this.slotChanged\n    }));\n  }\n  get el() {\n    return this;\n  }\n  static get watchers() {\n    return {\n      \"maxItems\": [\"maxItemsChanged\"],\n      \"itemsBeforeCollapse\": [\"maxItemsChanged\"],\n      \"itemsAfterCollapse\": [\"maxItemsChanged\"]\n    };\n  }\n  static get style() {\n    return {\n      ios: breadcrumbsIosCss,\n      md: breadcrumbsMdCss\n    };\n  }\n}, [33, \"ion-breadcrumbs\", {\n  \"color\": [1],\n  \"maxItems\": [2, \"max-items\"],\n  \"itemsBeforeCollapse\": [2, \"items-before-collapse\"],\n  \"itemsAfterCollapse\": [2, \"items-after-collapse\"],\n  \"collapsed\": [32],\n  \"activeChanged\": [32]\n}, [[0, \"collapsedClick\", \"onCollapsedClick\"]]]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-breadcrumbs\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-breadcrumbs\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Breadcrumbs);\n        }\n        break;\n    }\n  });\n}\nconst IonBreadcrumbs = Breadcrumbs;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonBreadcrumbs, defineCustomElement };","map":{"version":3,"names":["proxyCustomElement","HTMLElement","createEvent","h","Host","b","getIonMode","c","createColorClasses","hostContext","breadcrumbsIosCss","breadcrumbsMdCss","Breadcrumbs","constructor","__registerHost","__attachShadow","ionCollapsedClick","itemsBeforeCollapse","itemsAfterCollapse","breadcrumbsInit","setBreadcrumbSeparator","setMaxItems","resetActiveBreadcrumb","breadcrumbs","getBreadcrumbs","activeBreadcrumb","find","breadcrumb","active","activeChanged","maxItems","showCollapsedIndicator","collapsed","shouldCollapse","undefined","length","forEach","index","last","separator","Array","from","el","querySelectorAll","slotChanged","onCollapsedClick","ev","collapsedBreadcrumbs","filter","emit","Object","assign","detail","maxItemsChanged","componentWillLoad","render","color","mode","class","onSlotchange","watchers","style","ios","md","defineCustomElement$1","customElements","components","tagName","get","define","IonBreadcrumbs","defineCustomElement"],"sources":["/Users/aliciamedina/Library/Mobile Documents/com~apple~CloudDocs/Work/Proyecto Fin Grado/Electron/Ionic/Chatty-iOS/node_modules/@ionic/core/components/ion-breadcrumbs.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { c as createColorClasses, h as hostContext } from './theme.js';\n\nconst breadcrumbsIosCss = \":host{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center}:host(.in-toolbar-color),:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator ion-icon{color:var(--ion-color-contrast)}:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator{background:rgba(var(--ion-color-contrast-rgb), 0.11)}:host(.in-toolbar){padding-left:20px;padding-right:20px;padding-top:0;padding-bottom:0;-ms-flex-pack:center;justify-content:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-toolbar){padding-left:unset;padding-right:unset;-webkit-padding-start:20px;padding-inline-start:20px;-webkit-padding-end:20px;padding-inline-end:20px}}\";\n\nconst breadcrumbsMdCss = \":host{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center}:host(.in-toolbar-color),:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator ion-icon{color:var(--ion-color-contrast)}:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator{background:rgba(var(--ion-color-contrast-rgb), 0.11)}:host(.in-toolbar){padding-left:8px;padding-right:8px;padding-top:0;padding-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-toolbar){padding-left:unset;padding-right:unset;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px}}\";\n\nconst Breadcrumbs = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionCollapsedClick = createEvent(this, \"ionCollapsedClick\", 7);\n    /**\n     * The number of breadcrumbs to show before the collapsed indicator.\n     * If `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`,\n     * the breadcrumbs will not be collapsed.\n     */\n    this.itemsBeforeCollapse = 1;\n    /**\n     * The number of breadcrumbs to show after the collapsed indicator.\n     * If `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`,\n     * the breadcrumbs will not be collapsed.\n     */\n    this.itemsAfterCollapse = 1;\n    this.breadcrumbsInit = () => {\n      this.setBreadcrumbSeparator();\n      this.setMaxItems();\n    };\n    this.resetActiveBreadcrumb = () => {\n      const breadcrumbs = this.getBreadcrumbs();\n      // Only reset the active breadcrumb if we were the ones to change it\n      // otherwise use the one set on the component\n      const activeBreadcrumb = breadcrumbs.find((breadcrumb) => breadcrumb.active);\n      if (activeBreadcrumb && this.activeChanged) {\n        activeBreadcrumb.active = false;\n      }\n    };\n    this.setMaxItems = () => {\n      const { itemsAfterCollapse, itemsBeforeCollapse, maxItems } = this;\n      const breadcrumbs = this.getBreadcrumbs();\n      for (const breadcrumb of breadcrumbs) {\n        breadcrumb.showCollapsedIndicator = false;\n        breadcrumb.collapsed = false;\n      }\n      // If the number of breadcrumbs exceeds the maximum number of items\n      // that should show and the items before / after collapse do not\n      // exceed the maximum items then we need to collapse the breadcrumbs\n      const shouldCollapse = maxItems !== undefined && breadcrumbs.length > maxItems && itemsBeforeCollapse + itemsAfterCollapse <= maxItems;\n      if (shouldCollapse) {\n        // Show the collapsed indicator in the first breadcrumb that collapses\n        breadcrumbs.forEach((breadcrumb, index) => {\n          if (index === itemsBeforeCollapse) {\n            breadcrumb.showCollapsedIndicator = true;\n          }\n          // Collapse all breadcrumbs that have an index greater than or equal to\n          // the number before collapse and an index less than the total number\n          // of breadcrumbs minus the items that should show after the collapse\n          if (index >= itemsBeforeCollapse && index < breadcrumbs.length - itemsAfterCollapse) {\n            breadcrumb.collapsed = true;\n          }\n        });\n      }\n    };\n    this.setBreadcrumbSeparator = () => {\n      const { itemsAfterCollapse, itemsBeforeCollapse, maxItems } = this;\n      const breadcrumbs = this.getBreadcrumbs();\n      // Check if an active breadcrumb exists already\n      const active = breadcrumbs.find((breadcrumb) => breadcrumb.active);\n      // Set the separator on all but the last breadcrumb\n      for (const breadcrumb of breadcrumbs) {\n        // The only time the last breadcrumb changes is when\n        // itemsAfterCollapse is set to 0, in this case the\n        // last breadcrumb will be the collapsed indicator\n        const last = maxItems !== undefined && itemsAfterCollapse === 0\n          ? breadcrumb === breadcrumbs[itemsBeforeCollapse]\n          : breadcrumb === breadcrumbs[breadcrumbs.length - 1];\n        breadcrumb.last = last;\n        // If the breadcrumb has defined whether or not to show the\n        // separator then use that value, otherwise check if it's the\n        // last breadcrumb\n        const separator = breadcrumb.separator !== undefined ? breadcrumb.separator : last ? undefined : true;\n        breadcrumb.separator = separator;\n        // If there is not an active breadcrumb already\n        // set the last one to active\n        if (!active && last) {\n          breadcrumb.active = true;\n          this.activeChanged = true;\n        }\n      }\n    };\n    this.getBreadcrumbs = () => {\n      return Array.from(this.el.querySelectorAll('ion-breadcrumb'));\n    };\n    this.slotChanged = () => {\n      this.resetActiveBreadcrumb();\n      this.breadcrumbsInit();\n    };\n  }\n  onCollapsedClick(ev) {\n    const breadcrumbs = this.getBreadcrumbs();\n    const collapsedBreadcrumbs = breadcrumbs.filter((breadcrumb) => breadcrumb.collapsed);\n    this.ionCollapsedClick.emit(Object.assign(Object.assign({}, ev.detail), { collapsedBreadcrumbs }));\n  }\n  maxItemsChanged() {\n    this.resetActiveBreadcrumb();\n    this.breadcrumbsInit();\n  }\n  componentWillLoad() {\n    this.breadcrumbsInit();\n  }\n  render() {\n    const { color, collapsed } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { class: createColorClasses(color, {\n        [mode]: true,\n        'in-toolbar': hostContext('ion-toolbar', this.el),\n        'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n        'breadcrumbs-collapsed': collapsed,\n      }) }, h(\"slot\", { onSlotchange: this.slotChanged })));\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"maxItems\": [\"maxItemsChanged\"],\n    \"itemsBeforeCollapse\": [\"maxItemsChanged\"],\n    \"itemsAfterCollapse\": [\"maxItemsChanged\"]\n  }; }\n  static get style() { return {\n    ios: breadcrumbsIosCss,\n    md: breadcrumbsMdCss\n  }; }\n}, [33, \"ion-breadcrumbs\", {\n    \"color\": [1],\n    \"maxItems\": [2, \"max-items\"],\n    \"itemsBeforeCollapse\": [2, \"items-before-collapse\"],\n    \"itemsAfterCollapse\": [2, \"items-after-collapse\"],\n    \"collapsed\": [32],\n    \"activeChanged\": [32]\n  }, [[0, \"collapsedClick\", \"onCollapsedClick\"]]]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-breadcrumbs\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-breadcrumbs\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Breadcrumbs);\n      }\n      break;\n  } });\n}\n\nconst IonBreadcrumbs = Breadcrumbs;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonBreadcrumbs, defineCustomElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}