{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof module:workbox-routing\n */\nclass Router {\n  /**\n   * Initializes a new Router.\n   */\n  constructor() {\n    this._routes = new Map();\n  }\n  /**\n   * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\n   * method name ('GET', etc.) to an array of all the corresponding `Route`\n   * instances that are registered.\n   */\n  get routes() {\n    return this._routes;\n  }\n  /**\n   * Adds a fetch event listener to respond to events when a route matches\n   * the event's request.\n   */\n  addFetchListener() {\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('fetch', event => {\n      const {\n        request\n      } = event;\n      const responsePromise = this.handleRequest({\n        request,\n        event\n      });\n      if (responsePromise) {\n        event.respondWith(responsePromise);\n      }\n    });\n  }\n  /**\n   * Adds a message event listener for URLs to cache from the window.\n   * This is useful to cache resources loaded on the page prior to when the\n   * service worker started controlling it.\n   *\n   * The format of the message data sent from the window should be as follows.\n   * Where the `urlsToCache` array may consist of URL strings or an array of\n   * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n   *\n   * ```\n   * {\n   *   type: 'CACHE_URLS',\n   *   payload: {\n   *     urlsToCache: [\n   *       './script1.js',\n   *       './script2.js',\n   *       ['./script3.js', {mode: 'no-cors'}],\n   *     ],\n   *   },\n   * }\n   * ```\n   */\n  addCacheListener() {\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('message', event => {\n      if (event.data && event.data.type === 'CACHE_URLS') {\n        const {\n          payload\n        } = event.data;\n        if (process.env.NODE_ENV !== 'production') {\n          logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n        }\n        const requestPromises = Promise.all(payload.urlsToCache.map(entry => {\n          if (typeof entry === 'string') {\n            entry = [entry];\n          }\n          const request = new Request(...entry);\n          return this.handleRequest({\n            request\n          });\n          // TODO(philipwalton): TypeScript errors without this typecast for\n          // some reason (probably a bug). The real type here should work but\n          // doesn't: `Array<Promise<Response> | undefined>`.\n        })); // TypeScript\n        event.waitUntil(requestPromises);\n        // If a MessageChannel was used, reply to the message on success.\n        if (event.ports && event.ports[0]) {\n          requestPromises.then(() => event.ports[0].postMessage(true));\n        }\n      }\n    });\n  }\n  /**\n   * Apply the routing rules to a FetchEvent object to get a Response from an\n   * appropriate Route's handler.\n   *\n   * @param {Object} options\n   * @param {Request} options.request The request to handle (this is usually\n   *     from a fetch event, but it does not have to be).\n   * @param {FetchEvent} [options.event] The event that triggered the request,\n   *     if applicable.\n   * @return {Promise<Response>|undefined} A promise is returned if a\n   *     registered route can handle the request. If there is no matching\n   *     route and there's no `defaultHandler`, `undefined` is returned.\n   */\n  handleRequest(_ref) {\n    let {\n      request,\n      event\n    } = _ref;\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'handleRequest',\n        paramName: 'options.request'\n      });\n    }\n    const url = new URL(request.url, location.href);\n    if (!url.protocol.startsWith('http')) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n      }\n      return;\n    }\n    const {\n      params,\n      route\n    } = this.findMatchingRoute({\n      url,\n      request,\n      event\n    });\n    let handler = route && route.handler;\n    const debugMessages = [];\n    if (process.env.NODE_ENV !== 'production') {\n      if (handler) {\n        debugMessages.push([`Found a route to handle this request:`, route]);\n        if (params) {\n          debugMessages.push([`Passing the following params to the route's handler:`, params]);\n        }\n      }\n    }\n    // If we don't have a handler because there was no matching route, then\n    // fall back to defaultHandler if that's defined.\n    if (!handler && this._defaultHandler) {\n      if (process.env.NODE_ENV !== 'production') {\n        debugMessages.push(`Failed to find a matching route. Falling ` + `back to the default handler.`);\n      }\n      handler = this._defaultHandler;\n    }\n    if (!handler) {\n      if (process.env.NODE_ENV !== 'production') {\n        // No handler so Workbox will do nothing. If logs is set of debug\n        // i.e. verbose, we should print out this information.\n        logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n      }\n      return;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      // We have a handler, meaning Workbox is going to handle the route.\n      // print the routing details to the console.\n      logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n      debugMessages.forEach(msg => {\n        if (Array.isArray(msg)) {\n          logger.log(...msg);\n        } else {\n          logger.log(msg);\n        }\n      });\n      logger.groupEnd();\n    }\n    // Wrap in try and catch in case the handle method throws a synchronous\n    // error. It should still callback to the catch handler.\n    let responsePromise;\n    try {\n      responsePromise = handler.handle({\n        url,\n        request,\n        event,\n        params\n      });\n    } catch (err) {\n      responsePromise = Promise.reject(err);\n    }\n    if (responsePromise instanceof Promise && this._catchHandler) {\n      responsePromise = responsePromise.catch(err => {\n        if (process.env.NODE_ENV !== 'production') {\n          // Still include URL here as it will be async from the console group\n          // and may not make sense without the URL\n          logger.groupCollapsed(`Error thrown when responding to: ` + ` ${getFriendlyURL(url)}. Falling back to Catch Handler.`);\n          logger.error(`Error thrown by:`, route);\n          logger.error(err);\n          logger.groupEnd();\n        }\n        return this._catchHandler.handle({\n          url,\n          request,\n          event\n        });\n      });\n    }\n    return responsePromise;\n  }\n  /**\n   * Checks a request and URL (and optionally an event) against the list of\n   * registered routes, and if there's a match, returns the corresponding\n   * route along with any params generated by the match.\n   *\n   * @param {Object} options\n   * @param {URL} options.url\n   * @param {Request} options.request The request to match.\n   * @param {Event} [options.event] The corresponding event (unless N/A).\n   * @return {Object} An object with `route` and `params` properties.\n   *     They are populated if a matching route was found or `undefined`\n   *     otherwise.\n   */\n  findMatchingRoute(_ref2) {\n    let {\n      url,\n      request,\n      event\n    } = _ref2;\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(url, URL, {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'findMatchingRoute',\n        paramName: 'options.url'\n      });\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'findMatchingRoute',\n        paramName: 'options.request'\n      });\n    }\n    const routes = this._routes.get(request.method) || [];\n    for (const route of routes) {\n      let params;\n      const matchResult = route.match({\n        url,\n        request,\n        event\n      });\n      if (matchResult) {\n        // See https://github.com/GoogleChrome/workbox/issues/2079\n        params = matchResult;\n        if (Array.isArray(matchResult) && matchResult.length === 0) {\n          // Instead of passing an empty array in as params, use undefined.\n          params = undefined;\n        } else if (matchResult.constructor === Object && Object.keys(matchResult).length === 0) {\n          // Instead of passing an empty object in as params, use undefined.\n          params = undefined;\n        } else if (typeof matchResult === 'boolean') {\n          // For the boolean value true (rather than just something truth-y),\n          // don't set params.\n          // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n          params = undefined;\n        }\n        // Return early if have a match.\n        return {\n          route,\n          params\n        };\n      }\n    }\n    // If no match was found above, return and empty object.\n    return {};\n  }\n  /**\n   * Define a default `handler` that's called when no routes explicitly\n   * match the incoming request.\n   *\n   * Without a default handler, unmatched requests will go against the\n   * network as if there were no service worker present.\n   *\n   * @param {module:workbox-routing~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   */\n  setDefaultHandler(handler) {\n    this._defaultHandler = normalizeHandler(handler);\n  }\n  /**\n   * If a Route throws an error while handling a request, this `handler`\n   * will be called and given a chance to provide a response.\n   *\n   * @param {module:workbox-routing~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   */\n  setCatchHandler(handler) {\n    this._catchHandler = normalizeHandler(handler);\n  }\n  /**\n   * Registers a route with the router.\n   *\n   * @param {module:workbox-routing.Route} route The route to register.\n   */\n  registerRoute(route) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(route, 'object', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route'\n      });\n      assert.hasMethod(route, 'match', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route'\n      });\n      assert.isType(route.handler, 'object', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route'\n      });\n      assert.hasMethod(route.handler, 'handle', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route.handler'\n      });\n      assert.isType(route.method, 'string', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route.method'\n      });\n    }\n    if (!this._routes.has(route.method)) {\n      this._routes.set(route.method, []);\n    }\n    // Give precedence to all of the earlier routes by adding this additional\n    // route to the end of the array.\n    this._routes.get(route.method).push(route);\n  }\n  /**\n   * Unregisters a route with the router.\n   *\n   * @param {module:workbox-routing.Route} route The route to unregister.\n   */\n  unregisterRoute(route) {\n    if (!this._routes.has(route.method)) {\n      throw new WorkboxError('unregister-route-but-not-found-with-method', {\n        method: route.method\n      });\n    }\n    const routeIndex = this._routes.get(route.method).indexOf(route);\n    if (routeIndex > -1) {\n      this._routes.get(route.method).splice(routeIndex, 1);\n    } else {\n      throw new WorkboxError('unregister-route-route-not-registered');\n    }\n  }\n}\nexport { Router };","map":{"version":3,"names":["assert","logger","WorkboxError","getFriendlyURL","normalizeHandler","Router","constructor","_routes","Map","routes","addFetchListener","self","addEventListener","event","request","responsePromise","handleRequest","respondWith","addCacheListener","data","type","payload","process","env","NODE_ENV","debug","urlsToCache","requestPromises","Promise","all","map","entry","Request","waitUntil","ports","then","postMessage","_ref","isInstance","moduleName","className","funcName","paramName","url","URL","location","href","protocol","startsWith","params","route","findMatchingRoute","handler","debugMessages","push","_defaultHandler","groupCollapsed","forEach","msg","Array","isArray","log","groupEnd","handle","err","reject","_catchHandler","catch","error","_ref2","get","method","matchResult","match","length","undefined","Object","keys","setDefaultHandler","setCatchHandler","registerRoute","isType","hasMethod","has","set","unregisterRoute","routeIndex","indexOf","splice"],"sources":["/Users/aliciamedina/Library/Mobile Documents/com~apple~CloudDocs/Work/Proyecto Fin Grado/Electron/Ionic/Chatty-iOS/node_modules/workbox-routing/Router.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof module:workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n    }\n    /**\n     * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle (this is usually\n     *     from a fetch event, but it does not have to be).\n     * @param {FetchEvent} [options.event] The event that triggered the request,\n     *     if applicable.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const { params, route } = this.findMatchingRoute({ url, request, event });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([\n                    `Found a route to handle this request:`, route,\n                ]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`, params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        if (!handler && this._defaultHandler) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler.`);\n            }\n            handler = this._defaultHandler;\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        if (responsePromise instanceof Promise && this._catchHandler) {\n            responsePromise = responsePromise.catch((err) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Still include URL here as it will be async from the console group\n                    // and may not make sense without the URL\n                    logger.groupCollapsed(`Error thrown when responding to: ` +\n                        ` ${getFriendlyURL(url)}. Falling back to Catch Handler.`);\n                    logger.error(`Error thrown by:`, route);\n                    logger.error(err);\n                    logger.groupEnd();\n                }\n                return this._catchHandler.handle({ url, request, event });\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request The request to match.\n     * @param {Event} [options.event] The corresponding event (unless N/A).\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(url, URL, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'findMatchingRoute',\n                paramName: 'options.url',\n            });\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'findMatchingRoute',\n                paramName: 'options.request',\n            });\n        }\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            const matchResult = route.match({ url, request, event });\n            if (matchResult) {\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                params = matchResult;\n                if (Array.isArray(matchResult) && matchResult.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if ((matchResult.constructor === Object &&\n                    Object.keys(matchResult).length === 0)) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setDefaultHandler(handler) {\n        this._defaultHandler = normalizeHandler(handler);\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,iCAAiC;AACxD,SAASC,MAAM,QAAQ,iCAAiC;AACxD,SAASC,YAAY,QAAQ,uCAAuC;AACpE,SAASC,cAAc,QAAQ,yCAAyC;AACxE,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,CAAC;EACT;AACJ;AACA;EACIC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,OAAO,GAAG,IAAIC,GAAG,EAAE;EAC5B;EACA;AACJ;AACA;AACA;AACA;EACI,IAAIC,MAAMA,CAAA,EAAG;IACT,OAAO,IAAI,CAACF,OAAO;EACvB;EACA;AACJ;AACA;AACA;EACIG,gBAAgBA,CAAA,EAAG;IACf;IACAC,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAIC,KAAK,IAAK;MACvC,MAAM;QAAEC;MAAQ,CAAC,GAAGD,KAAK;MACzB,MAAME,eAAe,GAAG,IAAI,CAACC,aAAa,CAAC;QAAEF,OAAO;QAAED;MAAM,CAAC,CAAC;MAC9D,IAAIE,eAAe,EAAE;QACjBF,KAAK,CAACI,WAAW,CAACF,eAAe,CAAC;MACtC;IACJ,CAAC,CAAE;EACP;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,gBAAgBA,CAAA,EAAG;IACf;IACAP,IAAI,CAACC,gBAAgB,CAAC,SAAS,EAAIC,KAAK,IAAK;MACzC,IAAIA,KAAK,CAACM,IAAI,IAAIN,KAAK,CAACM,IAAI,CAACC,IAAI,KAAK,YAAY,EAAE;QAChD,MAAM;UAAEC;QAAQ,CAAC,GAAGR,KAAK,CAACM,IAAI;QAC9B,IAAIG,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;UACvCvB,MAAM,CAACwB,KAAK,CAAE,8BAA6B,EAAEJ,OAAO,CAACK,WAAW,CAAC;QACrE;QACA,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACR,OAAO,CAACK,WAAW,CAACI,GAAG,CAAEC,KAAK,IAAK;UACnE,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;YAC3BA,KAAK,GAAG,CAACA,KAAK,CAAC;UACnB;UACA,MAAMjB,OAAO,GAAG,IAAIkB,OAAO,CAAC,GAAGD,KAAK,CAAC;UACrC,OAAO,IAAI,CAACf,aAAa,CAAC;YAAEF;UAAQ,CAAC,CAAC;UACtC;UACA;UACA;QACJ,CAAC,CAAC,CAAC,CAAC,CAAC;QACLD,KAAK,CAACoB,SAAS,CAACN,eAAe,CAAC;QAChC;QACA,IAAId,KAAK,CAACqB,KAAK,IAAIrB,KAAK,CAACqB,KAAK,CAAC,CAAC,CAAC,EAAE;UAC/BP,eAAe,CAACQ,IAAI,CAAC,MAAMtB,KAAK,CAACqB,KAAK,CAAC,CAAC,CAAC,CAACE,WAAW,CAAC,IAAI,CAAC,CAAC;QAChE;MACJ;IACJ,CAAC,CAAE;EACP;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIpB,aAAaA,CAAAqB,IAAA,EAAqB;IAAA,IAApB;MAAEvB,OAAO;MAAED;IAAM,CAAC,GAAAwB,IAAA;IAC5B,IAAIf,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvCxB,MAAM,CAACsC,UAAU,CAACxB,OAAO,EAAEkB,OAAO,EAAE;QAChCO,UAAU,EAAE,iBAAiB;QAC7BC,SAAS,EAAE,QAAQ;QACnBC,QAAQ,EAAE,eAAe;QACzBC,SAAS,EAAE;MACf,CAAC,CAAC;IACN;IACA,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC9B,OAAO,CAAC6B,GAAG,EAAEE,QAAQ,CAACC,IAAI,CAAC;IAC/C,IAAI,CAACH,GAAG,CAACI,QAAQ,CAACC,UAAU,CAAC,MAAM,CAAC,EAAE;MAClC,IAAI1B,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;QACvCvB,MAAM,CAACwB,KAAK,CAAE,2DAA0D,CAAC;MAC7E;MACA;IACJ;IACA,MAAM;MAAEwB,MAAM;MAAEC;IAAM,CAAC,GAAG,IAAI,CAACC,iBAAiB,CAAC;MAAER,GAAG;MAAE7B,OAAO;MAAED;IAAM,CAAC,CAAC;IACzE,IAAIuC,OAAO,GAAGF,KAAK,IAAIA,KAAK,CAACE,OAAO;IACpC,MAAMC,aAAa,GAAG,EAAE;IACxB,IAAI/B,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvC,IAAI4B,OAAO,EAAE;QACTC,aAAa,CAACC,IAAI,CAAC,CACd,uCAAsC,EAAEJ,KAAK,CACjD,CAAC;QACF,IAAID,MAAM,EAAE;UACRI,aAAa,CAACC,IAAI,CAAC,CACd,sDAAqD,EAAEL,MAAM,CACjE,CAAC;QACN;MACJ;IACJ;IACA;IACA;IACA,IAAI,CAACG,OAAO,IAAI,IAAI,CAACG,eAAe,EAAE;MAClC,IAAIjC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;QACvC6B,aAAa,CAACC,IAAI,CAAE,2CAA0C,GACzD,8BAA6B,CAAC;MACvC;MACAF,OAAO,GAAG,IAAI,CAACG,eAAe;IAClC;IACA,IAAI,CAACH,OAAO,EAAE;MACV,IAAI9B,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;QACvC;QACA;QACAvB,MAAM,CAACwB,KAAK,CAAE,uBAAsBtB,cAAc,CAACwC,GAAG,CAAE,EAAC,CAAC;MAC9D;MACA;IACJ;IACA,IAAIrB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvC;MACA;MACAvB,MAAM,CAACuD,cAAc,CAAE,4BAA2BrD,cAAc,CAACwC,GAAG,CAAE,EAAC,CAAC;MACxEU,aAAa,CAACI,OAAO,CAAEC,GAAG,IAAK;QAC3B,IAAIC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EAAE;UACpBzD,MAAM,CAAC4D,GAAG,CAAC,GAAGH,GAAG,CAAC;QACtB,CAAC,MACI;UACDzD,MAAM,CAAC4D,GAAG,CAACH,GAAG,CAAC;QACnB;MACJ,CAAC,CAAC;MACFzD,MAAM,CAAC6D,QAAQ,EAAE;IACrB;IACA;IACA;IACA,IAAI/C,eAAe;IACnB,IAAI;MACAA,eAAe,GAAGqC,OAAO,CAACW,MAAM,CAAC;QAAEpB,GAAG;QAAE7B,OAAO;QAAED,KAAK;QAAEoC;MAAO,CAAC,CAAC;IACrE,CAAC,CACD,OAAOe,GAAG,EAAE;MACRjD,eAAe,GAAGa,OAAO,CAACqC,MAAM,CAACD,GAAG,CAAC;IACzC;IACA,IAAIjD,eAAe,YAAYa,OAAO,IAAI,IAAI,CAACsC,aAAa,EAAE;MAC1DnD,eAAe,GAAGA,eAAe,CAACoD,KAAK,CAAEH,GAAG,IAAK;QAC7C,IAAI1C,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;UACvC;UACA;UACAvB,MAAM,CAACuD,cAAc,CAAE,mCAAkC,GACpD,IAAGrD,cAAc,CAACwC,GAAG,CAAE,kCAAiC,CAAC;UAC9D1C,MAAM,CAACmE,KAAK,CAAE,kBAAiB,EAAElB,KAAK,CAAC;UACvCjD,MAAM,CAACmE,KAAK,CAACJ,GAAG,CAAC;UACjB/D,MAAM,CAAC6D,QAAQ,EAAE;QACrB;QACA,OAAO,IAAI,CAACI,aAAa,CAACH,MAAM,CAAC;UAAEpB,GAAG;UAAE7B,OAAO;UAAED;QAAM,CAAC,CAAC;MAC7D,CAAC,CAAC;IACN;IACA,OAAOE,eAAe;EAC1B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIoC,iBAAiBA,CAAAkB,KAAA,EAA0B;IAAA,IAAzB;MAAE1B,GAAG;MAAE7B,OAAO;MAAED;IAAM,CAAC,GAAAwD,KAAA;IACrC,IAAI/C,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvCxB,MAAM,CAACsC,UAAU,CAACK,GAAG,EAAEC,GAAG,EAAE;QACxBL,UAAU,EAAE,iBAAiB;QAC7BC,SAAS,EAAE,QAAQ;QACnBC,QAAQ,EAAE,mBAAmB;QAC7BC,SAAS,EAAE;MACf,CAAC,CAAC;MACF1C,MAAM,CAACsC,UAAU,CAACxB,OAAO,EAAEkB,OAAO,EAAE;QAChCO,UAAU,EAAE,iBAAiB;QAC7BC,SAAS,EAAE,QAAQ;QACnBC,QAAQ,EAAE,mBAAmB;QAC7BC,SAAS,EAAE;MACf,CAAC,CAAC;IACN;IACA,MAAMjC,MAAM,GAAG,IAAI,CAACF,OAAO,CAAC+D,GAAG,CAACxD,OAAO,CAACyD,MAAM,CAAC,IAAI,EAAE;IACrD,KAAK,MAAMrB,KAAK,IAAIzC,MAAM,EAAE;MACxB,IAAIwC,MAAM;MACV,MAAMuB,WAAW,GAAGtB,KAAK,CAACuB,KAAK,CAAC;QAAE9B,GAAG;QAAE7B,OAAO;QAAED;MAAM,CAAC,CAAC;MACxD,IAAI2D,WAAW,EAAE;QACb;QACAvB,MAAM,GAAGuB,WAAW;QACpB,IAAIb,KAAK,CAACC,OAAO,CAACY,WAAW,CAAC,IAAIA,WAAW,CAACE,MAAM,KAAK,CAAC,EAAE;UACxD;UACAzB,MAAM,GAAG0B,SAAS;QACtB,CAAC,MACI,IAAKH,WAAW,CAAClE,WAAW,KAAKsE,MAAM,IACxCA,MAAM,CAACC,IAAI,CAACL,WAAW,CAAC,CAACE,MAAM,KAAK,CAAC,EAAG;UACxC;UACAzB,MAAM,GAAG0B,SAAS;QACtB,CAAC,MACI,IAAI,OAAOH,WAAW,KAAK,SAAS,EAAE;UACvC;UACA;UACA;UACAvB,MAAM,GAAG0B,SAAS;QACtB;QACA;QACA,OAAO;UAAEzB,KAAK;UAAED;QAAO,CAAC;MAC5B;IACJ;IACA;IACA,OAAO,CAAC,CAAC;EACb;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI6B,iBAAiBA,CAAC1B,OAAO,EAAE;IACvB,IAAI,CAACG,eAAe,GAAGnD,gBAAgB,CAACgD,OAAO,CAAC;EACpD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI2B,eAAeA,CAAC3B,OAAO,EAAE;IACrB,IAAI,CAACc,aAAa,GAAG9D,gBAAgB,CAACgD,OAAO,CAAC;EAClD;EACA;AACJ;AACA;AACA;AACA;EACI4B,aAAaA,CAAC9B,KAAK,EAAE;IACjB,IAAI5B,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvCxB,MAAM,CAACiF,MAAM,CAAC/B,KAAK,EAAE,QAAQ,EAAE;QAC3BX,UAAU,EAAE,iBAAiB;QAC7BC,SAAS,EAAE,QAAQ;QACnBC,QAAQ,EAAE,eAAe;QACzBC,SAAS,EAAE;MACf,CAAC,CAAC;MACF1C,MAAM,CAACkF,SAAS,CAAChC,KAAK,EAAE,OAAO,EAAE;QAC7BX,UAAU,EAAE,iBAAiB;QAC7BC,SAAS,EAAE,QAAQ;QACnBC,QAAQ,EAAE,eAAe;QACzBC,SAAS,EAAE;MACf,CAAC,CAAC;MACF1C,MAAM,CAACiF,MAAM,CAAC/B,KAAK,CAACE,OAAO,EAAE,QAAQ,EAAE;QACnCb,UAAU,EAAE,iBAAiB;QAC7BC,SAAS,EAAE,QAAQ;QACnBC,QAAQ,EAAE,eAAe;QACzBC,SAAS,EAAE;MACf,CAAC,CAAC;MACF1C,MAAM,CAACkF,SAAS,CAAChC,KAAK,CAACE,OAAO,EAAE,QAAQ,EAAE;QACtCb,UAAU,EAAE,iBAAiB;QAC7BC,SAAS,EAAE,QAAQ;QACnBC,QAAQ,EAAE,eAAe;QACzBC,SAAS,EAAE;MACf,CAAC,CAAC;MACF1C,MAAM,CAACiF,MAAM,CAAC/B,KAAK,CAACqB,MAAM,EAAE,QAAQ,EAAE;QAClChC,UAAU,EAAE,iBAAiB;QAC7BC,SAAS,EAAE,QAAQ;QACnBC,QAAQ,EAAE,eAAe;QACzBC,SAAS,EAAE;MACf,CAAC,CAAC;IACN;IACA,IAAI,CAAC,IAAI,CAACnC,OAAO,CAAC4E,GAAG,CAACjC,KAAK,CAACqB,MAAM,CAAC,EAAE;MACjC,IAAI,CAAChE,OAAO,CAAC6E,GAAG,CAAClC,KAAK,CAACqB,MAAM,EAAE,EAAE,CAAC;IACtC;IACA;IACA;IACA,IAAI,CAAChE,OAAO,CAAC+D,GAAG,CAACpB,KAAK,CAACqB,MAAM,CAAC,CAACjB,IAAI,CAACJ,KAAK,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;EACImC,eAAeA,CAACnC,KAAK,EAAE;IACnB,IAAI,CAAC,IAAI,CAAC3C,OAAO,CAAC4E,GAAG,CAACjC,KAAK,CAACqB,MAAM,CAAC,EAAE;MACjC,MAAM,IAAIrE,YAAY,CAAC,4CAA4C,EAAE;QACjEqE,MAAM,EAAErB,KAAK,CAACqB;MAClB,CAAC,CAAC;IACN;IACA,MAAMe,UAAU,GAAG,IAAI,CAAC/E,OAAO,CAAC+D,GAAG,CAACpB,KAAK,CAACqB,MAAM,CAAC,CAACgB,OAAO,CAACrC,KAAK,CAAC;IAChE,IAAIoC,UAAU,GAAG,CAAC,CAAC,EAAE;MACjB,IAAI,CAAC/E,OAAO,CAAC+D,GAAG,CAACpB,KAAK,CAACqB,MAAM,CAAC,CAACiB,MAAM,CAACF,UAAU,EAAE,CAAC,CAAC;IACxD,CAAC,MACI;MACD,MAAM,IAAIpF,YAAY,CAAC,uCAAuC,CAAC;IACnE;EACJ;AACJ;AACA,SAASG,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}