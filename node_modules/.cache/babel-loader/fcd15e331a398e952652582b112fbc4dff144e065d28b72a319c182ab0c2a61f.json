{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass NetworkFirst {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   * @param {number} options.networkTimeoutSeconds If set, any network requests\n   * that fail to respond within the timeout will fallback to the cache.\n   *\n   * This option can be used to combat\n   * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n   * scenarios.\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n    if (options.plugins) {\n      const isUsingCacheWillUpdate = options.plugins.some(plugin => !!plugin.cacheWillUpdate);\n      this._plugins = isUsingCacheWillUpdate ? options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n    } else {\n      // No plugins passed in, use the default plugin.\n      this._plugins = [cacheOkAndOpaquePlugin];\n    }\n    this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    if (process.env.NODE_ENV !== 'production') {\n      if (this._networkTimeoutSeconds) {\n        assert.isType(this._networkTimeoutSeconds, 'number', {\n          moduleName: 'workbox-strategies',\n          className: 'NetworkFirst',\n          funcName: 'constructor',\n          paramName: 'networkTimeoutSeconds'\n        });\n      }\n    }\n    this._fetchOptions = options.fetchOptions;\n    this._matchOptions = options.matchOptions;\n  }\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link module:workbox-routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request A request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n  async handle(_ref) {\n    let {\n      event,\n      request\n    } = _ref;\n    const logs = [];\n    if (typeof request === 'string') {\n      request = new Request(request);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-strategies',\n        className: 'NetworkFirst',\n        funcName: 'handle',\n        paramName: 'makeRequest'\n      });\n    }\n    const promises = [];\n    let timeoutId;\n    if (this._networkTimeoutSeconds) {\n      const {\n        id,\n        promise\n      } = this._getTimeoutPromise({\n        request,\n        event,\n        logs\n      });\n      timeoutId = id;\n      promises.push(promise);\n    }\n    const networkPromise = this._getNetworkPromise({\n      timeoutId,\n      request,\n      event,\n      logs\n    });\n    promises.push(networkPromise);\n    // Promise.race() will resolve as soon as the first promise resolves.\n    let response = await Promise.race(promises);\n    // If Promise.race() resolved with null, it might be due to a network\n    // timeout + a cache miss. If that were to happen, we'd rather wait until\n    // the networkPromise resolves instead of returning null.\n    // Note that it's fine to await an already-resolved promise, so we don't\n    // have to check to see if it's still \"in flight\".\n    if (!response) {\n      response = await networkPromise;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(messages.strategyStart('NetworkFirst', request));\n      for (const log of logs) {\n        logger.log(log);\n      }\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n    if (!response) {\n      throw new WorkboxError('no-response', {\n        url: request.url\n      });\n    }\n    return response;\n  }\n  /**\n   * @param {Object} options\n   * @param {Request} options.request\n   * @param {Array} options.logs A reference to the logs array\n   * @param {Event} [options.event]\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n  _getTimeoutPromise(_ref2) {\n    let {\n      request,\n      logs,\n      event\n    } = _ref2;\n    let timeoutId;\n    const timeoutPromise = new Promise(resolve => {\n      const onNetworkTimeout = async () => {\n        if (process.env.NODE_ENV !== 'production') {\n          logs.push(`Timing out the network response at ` + `${this._networkTimeoutSeconds} seconds.`);\n        }\n        resolve(await this._respondFromCache({\n          request,\n          event\n        }));\n      };\n      timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n    });\n    return {\n      promise: timeoutPromise,\n      id: timeoutId\n    };\n  }\n  /**\n   * @param {Object} options\n   * @param {number|undefined} options.timeoutId\n   * @param {Request} options.request\n   * @param {Array} options.logs A reference to the logs Array.\n   * @param {Event} [options.event]\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n  async _getNetworkPromise(_ref3) {\n    let {\n      timeoutId,\n      request,\n      logs,\n      event\n    } = _ref3;\n    let error;\n    let response;\n    try {\n      response = await fetchWrapper.fetch({\n        request,\n        event,\n        fetchOptions: this._fetchOptions,\n        plugins: this._plugins\n      });\n    } catch (err) {\n      error = err;\n    }\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (response) {\n        logs.push(`Got response from network.`);\n      } else {\n        logs.push(`Unable to get a response from the network. Will respond ` + `with a cached response.`);\n      }\n    }\n    if (error || !response) {\n      response = await this._respondFromCache({\n        request,\n        event\n      });\n      if (process.env.NODE_ENV !== 'production') {\n        if (response) {\n          logs.push(`Found a cached response in the '${this._cacheName}'` + ` cache.`);\n        } else {\n          logs.push(`No response found in the '${this._cacheName}' cache.`);\n        }\n      }\n    } else {\n      // Keep the service worker alive while we put the request in the cache\n      const responseClone = response.clone();\n      const cachePut = cacheWrapper.put({\n        cacheName: this._cacheName,\n        request,\n        response: responseClone,\n        event,\n        plugins: this._plugins\n      });\n      if (event) {\n        try {\n          // The event has been responded to so we can keep the SW alive to\n          // respond to the request\n          event.waitUntil(cachePut);\n        } catch (err) {\n          if (process.env.NODE_ENV !== 'production') {\n            logger.warn(`Unable to ensure service worker stays alive when ` + `updating cache for '${getFriendlyURL(request.url)}'.`);\n          }\n        }\n      }\n    }\n    return response;\n  }\n  /**\n   * Used if the network timeouts or fails to make the request.\n   *\n   * @param {Object} options\n   * @param {Request} request The request to match in the cache\n   * @param {Event} [options.event]\n   * @return {Promise<Object>}\n   *\n   * @private\n   */\n  _respondFromCache(_ref4) {\n    let {\n      event,\n      request\n    } = _ref4;\n    return cacheWrapper.match({\n      cacheName: this._cacheName,\n      request,\n      event,\n      matchOptions: this._matchOptions,\n      plugins: this._plugins\n    });\n  }\n}\nexport { NetworkFirst };","map":{"version":3,"names":["assert","cacheNames","cacheWrapper","fetchWrapper","getFriendlyURL","logger","WorkboxError","messages","cacheOkAndOpaquePlugin","NetworkFirst","constructor","options","arguments","length","undefined","_cacheName","getRuntimeName","cacheName","plugins","isUsingCacheWillUpdate","some","plugin","cacheWillUpdate","_plugins","_networkTimeoutSeconds","networkTimeoutSeconds","process","env","NODE_ENV","isType","moduleName","className","funcName","paramName","_fetchOptions","fetchOptions","_matchOptions","matchOptions","handle","_ref","event","request","logs","Request","isInstance","promises","timeoutId","id","promise","_getTimeoutPromise","push","networkPromise","_getNetworkPromise","response","Promise","race","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url","_ref2","timeoutPromise","resolve","onNetworkTimeout","_respondFromCache","setTimeout","_ref3","error","fetch","err","clearTimeout","responseClone","clone","cachePut","put","waitUntil","warn","_ref4","match"],"sources":["/Users/aliciamedina/Library/Mobile Documents/com~apple~CloudDocs/Work/Proyecto Fin Grado/Electron/Ionic/Chatty-iOS/node_modules/workbox-strategies/NetworkFirst.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass NetworkFirst {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} options.networkTimeoutSeconds If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        if (options.plugins) {\n            const isUsingCacheWillUpdate = options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\n            this._plugins = isUsingCacheWillUpdate ?\n                options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n        }\n        else {\n            // No plugins passed in, use the default plugin.\n            this._plugins = [cacheOkAndOpaquePlugin];\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: 'NetworkFirst',\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'NetworkFirst',\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, event, logs });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({ timeoutId, request, event, logs });\n        promises.push(networkPromise);\n        // Promise.race() will resolve as soon as the first promise resolves.\n        let response = await Promise.race(promises);\n        // If Promise.race() resolved with null, it might be due to a network\n        // timeout + a cache miss. If that were to happen, we'd rather wait until\n        // the networkPromise resolves instead of returning null.\n        // Note that it's fine to await an already-resolved promise, so we don't\n        // have to check to see if it's still \"in flight\".\n        if (!response) {\n            response = await networkPromise;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('NetworkFirst', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, event }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await this._respondFromCache({ request, event }));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, event }) {\n        let error;\n        let response;\n        try {\n            response = await fetchWrapper.fetch({\n                request,\n                event,\n                fetchOptions: this._fetchOptions,\n                plugins: this._plugins,\n            });\n        }\n        catch (err) {\n            error = err;\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await this._respondFromCache({ request, event });\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this._cacheName}'` +\n                        ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this._cacheName}' cache.`);\n                }\n            }\n        }\n        else {\n            // Keep the service worker alive while we put the request in the cache\n            const responseClone = response.clone();\n            const cachePut = cacheWrapper.put({\n                cacheName: this._cacheName,\n                request,\n                response: responseClone,\n                event,\n                plugins: this._plugins,\n            });\n            if (event) {\n                try {\n                    // The event has been responded to so we can keep the SW alive to\n                    // respond to the request\n                    event.waitUntil(cachePut);\n                }\n                catch (err) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.warn(`Unable to ensure service worker stays alive when ` +\n                            `updating cache for '${getFriendlyURL(request.url)}'.`);\n                    }\n                }\n            }\n        }\n        return response;\n    }\n    /**\n     * Used if the network timeouts or fails to make the request.\n     *\n     * @param {Object} options\n     * @param {Request} request The request to match in the cache\n     * @param {Event} [options.event]\n     * @return {Promise<Object>}\n     *\n     * @private\n     */\n    _respondFromCache({ event, request }) {\n        return cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n    }\n}\nexport { NetworkFirst };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,iCAAiC;AACxD,SAASC,UAAU,QAAQ,qCAAqC;AAChE,SAASC,YAAY,QAAQ,uCAAuC;AACpE,SAASC,YAAY,QAAQ,uCAAuC;AACpE,SAASC,cAAc,QAAQ,yCAAyC;AACxE,SAASC,MAAM,QAAQ,iCAAiC;AACxD,SAASC,YAAY,QAAQ,uCAAuC;AACpE,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,sBAAsB,QAAQ,qCAAqC;AAC5E,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,CAAC;EACf;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAAA,EAAe;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACpB,IAAI,CAACG,UAAU,GAAGd,UAAU,CAACe,cAAc,CAACL,OAAO,CAACM,SAAS,CAAC;IAC9D,IAAIN,OAAO,CAACO,OAAO,EAAE;MACjB,MAAMC,sBAAsB,GAAGR,OAAO,CAACO,OAAO,CAACE,IAAI,CAAEC,MAAM,IAAK,CAAC,CAACA,MAAM,CAACC,eAAe,CAAC;MACzF,IAAI,CAACC,QAAQ,GAAGJ,sBAAsB,GAClCR,OAAO,CAACO,OAAO,GAAG,CAACV,sBAAsB,EAAE,GAAGG,OAAO,CAACO,OAAO,CAAC;IACtE,CAAC,MACI;MACD;MACA,IAAI,CAACK,QAAQ,GAAG,CAACf,sBAAsB,CAAC;IAC5C;IACA,IAAI,CAACgB,sBAAsB,GAAGb,OAAO,CAACc,qBAAqB,IAAI,CAAC;IAChE,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvC,IAAI,IAAI,CAACJ,sBAAsB,EAAE;QAC7BxB,MAAM,CAAC6B,MAAM,CAAC,IAAI,CAACL,sBAAsB,EAAE,QAAQ,EAAE;UACjDM,UAAU,EAAE,oBAAoB;UAChCC,SAAS,EAAE,cAAc;UACzBC,QAAQ,EAAE,aAAa;UACvBC,SAAS,EAAE;QACf,CAAC,CAAC;MACN;IACJ;IACA,IAAI,CAACC,aAAa,GAAGvB,OAAO,CAACwB,YAAY;IACzC,IAAI,CAACC,aAAa,GAAGzB,OAAO,CAAC0B,YAAY;EAC7C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,MAAMA,CAAAC,IAAA,EAAqB;IAAA,IAApB;MAAEC,KAAK;MAAEC;IAAQ,CAAC,GAAAF,IAAA;IAC3B,MAAMG,IAAI,GAAG,EAAE;IACf,IAAI,OAAOD,OAAO,KAAK,QAAQ,EAAE;MAC7BA,OAAO,GAAG,IAAIE,OAAO,CAACF,OAAO,CAAC;IAClC;IACA,IAAIf,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvC5B,MAAM,CAAC4C,UAAU,CAACH,OAAO,EAAEE,OAAO,EAAE;QAChCb,UAAU,EAAE,oBAAoB;QAChCC,SAAS,EAAE,cAAc;QACzBC,QAAQ,EAAE,QAAQ;QAClBC,SAAS,EAAE;MACf,CAAC,CAAC;IACN;IACA,MAAMY,QAAQ,GAAG,EAAE;IACnB,IAAIC,SAAS;IACb,IAAI,IAAI,CAACtB,sBAAsB,EAAE;MAC7B,MAAM;QAAEuB,EAAE;QAAEC;MAAQ,CAAC,GAAG,IAAI,CAACC,kBAAkB,CAAC;QAAER,OAAO;QAAED,KAAK;QAAEE;MAAK,CAAC,CAAC;MACzEI,SAAS,GAAGC,EAAE;MACdF,QAAQ,CAACK,IAAI,CAACF,OAAO,CAAC;IAC1B;IACA,MAAMG,cAAc,GAAG,IAAI,CAACC,kBAAkB,CAAC;MAAEN,SAAS;MAAEL,OAAO;MAAED,KAAK;MAAEE;IAAK,CAAC,CAAC;IACnFG,QAAQ,CAACK,IAAI,CAACC,cAAc,CAAC;IAC7B;IACA,IAAIE,QAAQ,GAAG,MAAMC,OAAO,CAACC,IAAI,CAACV,QAAQ,CAAC;IAC3C;IACA;IACA;IACA;IACA;IACA,IAAI,CAACQ,QAAQ,EAAE;MACXA,QAAQ,GAAG,MAAMF,cAAc;IACnC;IACA,IAAIzB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvCvB,MAAM,CAACmD,cAAc,CAACjD,QAAQ,CAACkD,aAAa,CAAC,cAAc,EAAEhB,OAAO,CAAC,CAAC;MACtE,KAAK,MAAMiB,GAAG,IAAIhB,IAAI,EAAE;QACpBrC,MAAM,CAACqD,GAAG,CAACA,GAAG,CAAC;MACnB;MACAnD,QAAQ,CAACoD,kBAAkB,CAACN,QAAQ,CAAC;MACrChD,MAAM,CAACuD,QAAQ,EAAE;IACrB;IACA,IAAI,CAACP,QAAQ,EAAE;MACX,MAAM,IAAI/C,YAAY,CAAC,aAAa,EAAE;QAAEuD,GAAG,EAAEpB,OAAO,CAACoB;MAAI,CAAC,CAAC;IAC/D;IACA,OAAOR,QAAQ;EACnB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIJ,kBAAkBA,CAAAa,KAAA,EAA2B;IAAA,IAA1B;MAAErB,OAAO;MAAEC,IAAI;MAAEF;IAAM,CAAC,GAAAsB,KAAA;IACvC,IAAIhB,SAAS;IACb,MAAMiB,cAAc,GAAG,IAAIT,OAAO,CAAEU,OAAO,IAAK;MAC5C,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;QACjC,IAAIvC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;UACvCc,IAAI,CAACQ,IAAI,CAAE,qCAAoC,GAC1C,GAAE,IAAI,CAAC1B,sBAAuB,WAAU,CAAC;QAClD;QACAwC,OAAO,CAAC,MAAM,IAAI,CAACE,iBAAiB,CAAC;UAAEzB,OAAO;UAAED;QAAM,CAAC,CAAC,CAAC;MAC7D,CAAC;MACDM,SAAS,GAAGqB,UAAU,CAACF,gBAAgB,EAAE,IAAI,CAACzC,sBAAsB,GAAG,IAAI,CAAC;IAChF,CAAC,CAAC;IACF,OAAO;MACHwB,OAAO,EAAEe,cAAc;MACvBhB,EAAE,EAAED;IACR,CAAC;EACL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMM,kBAAkBA,CAAAgB,KAAA,EAAsC;IAAA,IAArC;MAAEtB,SAAS;MAAEL,OAAO;MAAEC,IAAI;MAAEF;IAAM,CAAC,GAAA4B,KAAA;IACxD,IAAIC,KAAK;IACT,IAAIhB,QAAQ;IACZ,IAAI;MACAA,QAAQ,GAAG,MAAMlD,YAAY,CAACmE,KAAK,CAAC;QAChC7B,OAAO;QACPD,KAAK;QACLL,YAAY,EAAE,IAAI,CAACD,aAAa;QAChChB,OAAO,EAAE,IAAI,CAACK;MAClB,CAAC,CAAC;IACN,CAAC,CACD,OAAOgD,GAAG,EAAE;MACRF,KAAK,GAAGE,GAAG;IACf;IACA,IAAIzB,SAAS,EAAE;MACX0B,YAAY,CAAC1B,SAAS,CAAC;IAC3B;IACA,IAAIpB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvC,IAAIyB,QAAQ,EAAE;QACVX,IAAI,CAACQ,IAAI,CAAE,4BAA2B,CAAC;MAC3C,CAAC,MACI;QACDR,IAAI,CAACQ,IAAI,CAAE,0DAAyD,GAC/D,yBAAwB,CAAC;MAClC;IACJ;IACA,IAAImB,KAAK,IAAI,CAAChB,QAAQ,EAAE;MACpBA,QAAQ,GAAG,MAAM,IAAI,CAACa,iBAAiB,CAAC;QAAEzB,OAAO;QAAED;MAAM,CAAC,CAAC;MAC3D,IAAId,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;QACvC,IAAIyB,QAAQ,EAAE;UACVX,IAAI,CAACQ,IAAI,CAAE,mCAAkC,IAAI,CAACnC,UAAW,GAAE,GAC1D,SAAQ,CAAC;QAClB,CAAC,MACI;UACD2B,IAAI,CAACQ,IAAI,CAAE,6BAA4B,IAAI,CAACnC,UAAW,UAAS,CAAC;QACrE;MACJ;IACJ,CAAC,MACI;MACD;MACA,MAAM0D,aAAa,GAAGpB,QAAQ,CAACqB,KAAK,EAAE;MACtC,MAAMC,QAAQ,GAAGzE,YAAY,CAAC0E,GAAG,CAAC;QAC9B3D,SAAS,EAAE,IAAI,CAACF,UAAU;QAC1B0B,OAAO;QACPY,QAAQ,EAAEoB,aAAa;QACvBjC,KAAK;QACLtB,OAAO,EAAE,IAAI,CAACK;MAClB,CAAC,CAAC;MACF,IAAIiB,KAAK,EAAE;QACP,IAAI;UACA;UACA;UACAA,KAAK,CAACqC,SAAS,CAACF,QAAQ,CAAC;QAC7B,CAAC,CACD,OAAOJ,GAAG,EAAE;UACR,IAAI7C,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;YACvCvB,MAAM,CAACyE,IAAI,CAAE,mDAAkD,GAC1D,uBAAsB1E,cAAc,CAACqC,OAAO,CAACoB,GAAG,CAAE,IAAG,CAAC;UAC/D;QACJ;MACJ;IACJ;IACA,OAAOR,QAAQ;EACnB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIa,iBAAiBA,CAAAa,KAAA,EAAqB;IAAA,IAApB;MAAEvC,KAAK;MAAEC;IAAQ,CAAC,GAAAsC,KAAA;IAChC,OAAO7E,YAAY,CAAC8E,KAAK,CAAC;MACtB/D,SAAS,EAAE,IAAI,CAACF,UAAU;MAC1B0B,OAAO;MACPD,KAAK;MACLH,YAAY,EAAE,IAAI,CAACD,aAAa;MAChClB,OAAO,EAAE,IAAI,CAACK;IAClB,CAAC,CAAC;EACN;AACJ;AACA,SAASd,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}