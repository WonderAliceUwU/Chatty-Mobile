{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network}\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass CacheFirst {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n    this._plugins = options.plugins || [];\n    this._fetchOptions = options.fetchOptions;\n    this._matchOptions = options.matchOptions;\n  }\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link module:workbox-routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request A request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n  async handle(_ref) {\n    let {\n      event,\n      request\n    } = _ref;\n    const logs = [];\n    if (typeof request === 'string') {\n      request = new Request(request);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-strategies',\n        className: 'CacheFirst',\n        funcName: 'makeRequest',\n        paramName: 'request'\n      });\n    }\n    let response = await cacheWrapper.match({\n      cacheName: this._cacheName,\n      request,\n      event,\n      matchOptions: this._matchOptions,\n      plugins: this._plugins\n    });\n    let error;\n    if (!response) {\n      if (process.env.NODE_ENV !== 'production') {\n        logs.push(`No response found in the '${this._cacheName}' cache. ` + `Will respond with a network request.`);\n      }\n      try {\n        response = await this._getFromNetwork(request, event);\n      } catch (err) {\n        error = err;\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        if (response) {\n          logs.push(`Got response from network.`);\n        } else {\n          logs.push(`Unable to get a response from the network.`);\n        }\n      }\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        logs.push(`Found a cached response in the '${this._cacheName}' cache.`);\n      }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(messages.strategyStart('CacheFirst', request));\n      for (const log of logs) {\n        logger.log(log);\n      }\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n    if (!response) {\n      throw new WorkboxError('no-response', {\n        url: request.url,\n        error\n      });\n    }\n    return response;\n  }\n  /**\n   * Handles the network and cache part of CacheFirst.\n   *\n   * @param {Request} request\n   * @param {Event} [event]\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n  async _getFromNetwork(request, event) {\n    const response = await fetchWrapper.fetch({\n      request,\n      event,\n      fetchOptions: this._fetchOptions,\n      plugins: this._plugins\n    });\n    // Keep the service worker while we put the request to the cache\n    const responseClone = response.clone();\n    const cachePutPromise = cacheWrapper.put({\n      cacheName: this._cacheName,\n      request,\n      response: responseClone,\n      event,\n      plugins: this._plugins\n    });\n    if (event) {\n      try {\n        event.waitUntil(cachePutPromise);\n      } catch (error) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.warn(`Unable to ensure service worker stays alive when ` + `updating cache for '${getFriendlyURL(request.url)}'.`);\n        }\n      }\n    }\n    return response;\n  }\n}\nexport { CacheFirst };","map":{"version":3,"names":["assert","cacheNames","cacheWrapper","fetchWrapper","getFriendlyURL","logger","WorkboxError","messages","CacheFirst","constructor","options","arguments","length","undefined","_cacheName","getRuntimeName","cacheName","_plugins","plugins","_fetchOptions","fetchOptions","_matchOptions","matchOptions","handle","_ref","event","request","logs","Request","process","env","NODE_ENV","isInstance","moduleName","className","funcName","paramName","response","match","error","push","_getFromNetwork","err","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url","fetch","responseClone","clone","cachePutPromise","put","waitUntil","warn"],"sources":["/Users/aliciamedina/Library/Mobile Documents/com~apple~CloudDocs/Work/Proyecto Fin Grado/Electron/Ionic/Chatty-iOS/node_modules/workbox-strategies/CacheFirst.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network}\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass CacheFirst {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        this._plugins = options.plugins || [];\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'CacheFirst',\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n        let error;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this._cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await this._getFromNetwork(request, event);\n            }\n            catch (err) {\n                error = err;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this._cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('CacheFirst', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n    /**\n     * Handles the network and cache part of CacheFirst.\n     *\n     * @param {Request} request\n     * @param {Event} [event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getFromNetwork(request, event) {\n        const response = await fetchWrapper.fetch({\n            request,\n            event,\n            fetchOptions: this._fetchOptions,\n            plugins: this._plugins,\n        });\n        // Keep the service worker while we put the request to the cache\n        const responseClone = response.clone();\n        const cachePutPromise = cacheWrapper.put({\n            cacheName: this._cacheName,\n            request,\n            response: responseClone,\n            event,\n            plugins: this._plugins,\n        });\n        if (event) {\n            try {\n                event.waitUntil(cachePutPromise);\n            }\n            catch (error) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(`Unable to ensure service worker stays alive when ` +\n                        `updating cache for '${getFriendlyURL(request.url)}'.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}