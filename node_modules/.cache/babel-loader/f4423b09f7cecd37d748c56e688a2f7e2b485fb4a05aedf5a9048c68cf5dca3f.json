{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { DBWrapper } from 'workbox-core/_private/DBWrapper.js';\nimport { deleteDatabase } from 'workbox-core/_private/deleteDatabase.js';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst OBJECT_STORE_NAME = 'cache-entries';\nconst normalizeURL = unNormalizedUrl => {\n  const url = new URL(unNormalizedUrl, location.href);\n  url.hash = '';\n  return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n  /**\n   *\n   * @param {string} cacheName\n   *\n   * @private\n   */\n  constructor(cacheName) {\n    this._cacheName = cacheName;\n    this._db = new DBWrapper(DB_NAME, 1, {\n      onupgradeneeded: event => this._handleUpgrade(event)\n    });\n  }\n  /**\n   * Should perform an upgrade of indexedDB.\n   *\n   * @param {Event} event\n   *\n   * @private\n   */\n  _handleUpgrade(event) {\n    const db = event.target.result;\n    // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n    // have to use the `id` keyPath here and create our own values (a\n    // concatenation of `url + cacheName`) instead of simply using\n    // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n    const objStore = db.createObjectStore(OBJECT_STORE_NAME, {\n      keyPath: 'id'\n    });\n    // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n    // create a single index with the keyPath `['cacheName', 'timestamp']`\n    // instead of doing both these indexes.\n    objStore.createIndex('cacheName', 'cacheName', {\n      unique: false\n    });\n    objStore.createIndex('timestamp', 'timestamp', {\n      unique: false\n    });\n    // Previous versions of `workbox-expiration` used `this._cacheName`\n    // as the IDBDatabase name.\n    deleteDatabase(this._cacheName);\n  }\n  /**\n   * @param {string} url\n   * @param {number} timestamp\n   *\n   * @private\n   */\n  async setTimestamp(url, timestamp) {\n    url = normalizeURL(url);\n    const entry = {\n      url,\n      timestamp,\n      cacheName: this._cacheName,\n      // Creating an ID from the URL and cache name won't be necessary once\n      // Edge switches to Chromium and all browsers we support work with\n      // array keyPaths.\n      id: this._getId(url)\n    };\n    await this._db.put(OBJECT_STORE_NAME, entry);\n  }\n  /**\n   * Returns the timestamp stored for a given URL.\n   *\n   * @param {string} url\n   * @return {number}\n   *\n   * @private\n   */\n  async getTimestamp(url) {\n    const entry = await this._db.get(OBJECT_STORE_NAME, this._getId(url));\n    return entry.timestamp;\n  }\n  /**\n   * Iterates through all the entries in the object store (from newest to\n   * oldest) and removes entries once either `maxCount` is reached or the\n   * entry's timestamp is less than `minTimestamp`.\n   *\n   * @param {number} minTimestamp\n   * @param {number} maxCount\n   * @return {Array<string>}\n   *\n   * @private\n   */\n  async expireEntries(minTimestamp, maxCount) {\n    const entriesToDelete = await this._db.transaction(OBJECT_STORE_NAME, 'readwrite', (txn, done) => {\n      const store = txn.objectStore(OBJECT_STORE_NAME);\n      const request = store.index('timestamp').openCursor(null, 'prev');\n      const entriesToDelete = [];\n      let entriesNotDeletedCount = 0;\n      request.onsuccess = () => {\n        const cursor = request.result;\n        if (cursor) {\n          const result = cursor.value;\n          // TODO(philipwalton): once we can use a multi-key index, we\n          // won't have to check `cacheName` here.\n          if (result.cacheName === this._cacheName) {\n            // Delete an entry if it's older than the max age or\n            // if we already have the max number allowed.\n            if (minTimestamp && result.timestamp < minTimestamp || maxCount && entriesNotDeletedCount >= maxCount) {\n              // TODO(philipwalton): we should be able to delete the\n              // entry right here, but doing so causes an iteration\n              // bug in Safari stable (fixed in TP). Instead we can\n              // store the keys of the entries to delete, and then\n              // delete the separate transactions.\n              // https://github.com/GoogleChrome/workbox/issues/1978\n              // cursor.delete();\n              // We only need to return the URL, not the whole entry.\n              entriesToDelete.push(cursor.value);\n            } else {\n              entriesNotDeletedCount++;\n            }\n          }\n          cursor.continue();\n        } else {\n          done(entriesToDelete);\n        }\n      };\n    });\n    // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n    // we should be able to remove this loop and do the entry deletion in the\n    // cursor loop above:\n    // https://github.com/GoogleChrome/workbox/issues/1978\n    const urlsDeleted = [];\n    for (const entry of entriesToDelete) {\n      await this._db.delete(OBJECT_STORE_NAME, entry.id);\n      urlsDeleted.push(entry.url);\n    }\n    return urlsDeleted;\n  }\n  /**\n   * Takes a URL and returns an ID that will be unique in the object store.\n   *\n   * @param {string} url\n   * @return {string}\n   *\n   * @private\n   */\n  _getId(url) {\n    // Creating an ID from the URL and cache name won't be necessary once\n    // Edge switches to Chromium and all browsers we support work with\n    // array keyPaths.\n    return this._cacheName + '|' + normalizeURL(url);\n  }\n}\nexport { CacheTimestampsModel };","map":{"version":3,"names":["DBWrapper","deleteDatabase","DB_NAME","OBJECT_STORE_NAME","normalizeURL","unNormalizedUrl","url","URL","location","href","hash","CacheTimestampsModel","constructor","cacheName","_cacheName","_db","onupgradeneeded","event","_handleUpgrade","db","target","result","objStore","createObjectStore","keyPath","createIndex","unique","setTimestamp","timestamp","entry","id","_getId","put","getTimestamp","get","expireEntries","minTimestamp","maxCount","entriesToDelete","transaction","txn","done","store","objectStore","request","index","openCursor","entriesNotDeletedCount","onsuccess","cursor","value","push","continue","urlsDeleted","delete"],"sources":["/Users/aliciamedina/Library/Mobile Documents/com~apple~CloudDocs/Work/Proyecto Fin Grado/Electron/Ionic/Chatty-iOS/node_modules/workbox-expiration/models/CacheTimestampsModel.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { DBWrapper } from 'workbox-core/_private/DBWrapper.js';\nimport { deleteDatabase } from 'workbox-core/_private/deleteDatabase.js';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst OBJECT_STORE_NAME = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._cacheName = cacheName;\n        this._db = new DBWrapper(DB_NAME, 1, {\n            onupgradeneeded: (event) => this._handleUpgrade(event),\n        });\n    }\n    /**\n     * Should perform an upgrade of indexedDB.\n     *\n     * @param {Event} event\n     *\n     * @private\n     */\n    _handleUpgrade(event) {\n        const db = event.target.result;\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n        // Previous versions of `workbox-expiration` used `this._cacheName`\n        // as the IDBDatabase name.\n        deleteDatabase(this._cacheName);\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        await this._db.put(OBJECT_STORE_NAME, entry);\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const entry = await this._db.get(OBJECT_STORE_NAME, this._getId(url));\n        return entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const entriesToDelete = await this._db.transaction(OBJECT_STORE_NAME, 'readwrite', (txn, done) => {\n            const store = txn.objectStore(OBJECT_STORE_NAME);\n            const request = store.index('timestamp').openCursor(null, 'prev');\n            const entriesToDelete = [];\n            let entriesNotDeletedCount = 0;\n            request.onsuccess = () => {\n                const cursor = request.result;\n                if (cursor) {\n                    const result = cursor.value;\n                    // TODO(philipwalton): once we can use a multi-key index, we\n                    // won't have to check `cacheName` here.\n                    if (result.cacheName === this._cacheName) {\n                        // Delete an entry if it's older than the max age or\n                        // if we already have the max number allowed.\n                        if ((minTimestamp && result.timestamp < minTimestamp) ||\n                            (maxCount && entriesNotDeletedCount >= maxCount)) {\n                            // TODO(philipwalton): we should be able to delete the\n                            // entry right here, but doing so causes an iteration\n                            // bug in Safari stable (fixed in TP). Instead we can\n                            // store the keys of the entries to delete, and then\n                            // delete the separate transactions.\n                            // https://github.com/GoogleChrome/workbox/issues/1978\n                            // cursor.delete();\n                            // We only need to return the URL, not the whole entry.\n                            entriesToDelete.push(cursor.value);\n                        }\n                        else {\n                            entriesNotDeletedCount++;\n                        }\n                    }\n                    cursor.continue();\n                }\n                else {\n                    done(entriesToDelete);\n                }\n            };\n        });\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await this._db.delete(OBJECT_STORE_NAME, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n}\nexport { CacheTimestampsModel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}