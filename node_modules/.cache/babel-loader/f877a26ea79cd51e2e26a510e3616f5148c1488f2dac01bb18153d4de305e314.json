{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass StaleWhileRevalidate {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n    this._plugins = options.plugins || [];\n    if (options.plugins) {\n      const isUsingCacheWillUpdate = options.plugins.some(plugin => !!plugin.cacheWillUpdate);\n      this._plugins = isUsingCacheWillUpdate ? options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n    } else {\n      // No plugins passed in, use the default plugin.\n      this._plugins = [cacheOkAndOpaquePlugin];\n    }\n    this._fetchOptions = options.fetchOptions;\n    this._matchOptions = options.matchOptions;\n  }\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link module:workbox-routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request A request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n  async handle(_ref) {\n    let {\n      event,\n      request\n    } = _ref;\n    const logs = [];\n    if (typeof request === 'string') {\n      request = new Request(request);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-strategies',\n        className: 'StaleWhileRevalidate',\n        funcName: 'handle',\n        paramName: 'request'\n      });\n    }\n    const fetchAndCachePromise = this._getFromNetwork({\n      request,\n      event\n    });\n    let response = await cacheWrapper.match({\n      cacheName: this._cacheName,\n      request,\n      event,\n      matchOptions: this._matchOptions,\n      plugins: this._plugins\n    });\n    let error;\n    if (response) {\n      if (process.env.NODE_ENV !== 'production') {\n        logs.push(`Found a cached response in the '${this._cacheName}'` + ` cache. Will update with the network response in the background.`);\n      }\n      if (event) {\n        try {\n          event.waitUntil(fetchAndCachePromise);\n        } catch (error) {\n          if (process.env.NODE_ENV !== 'production') {\n            logger.warn(`Unable to ensure service worker stays alive when ` + `updating cache for '${getFriendlyURL(request.url)}'.`);\n          }\n        }\n      }\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        logs.push(`No response found in the '${this._cacheName}' cache. ` + `Will wait for the network response.`);\n      }\n      try {\n        response = await fetchAndCachePromise;\n      } catch (err) {\n        error = err;\n      }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(messages.strategyStart('StaleWhileRevalidate', request));\n      for (const log of logs) {\n        logger.log(log);\n      }\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n    if (!response) {\n      throw new WorkboxError('no-response', {\n        url: request.url,\n        error\n      });\n    }\n    return response;\n  }\n  /**\n   * @param {Object} options\n   * @param {Request} options.request\n   * @param {Event} [options.event]\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n  async _getFromNetwork(_ref2) {\n    let {\n      request,\n      event\n    } = _ref2;\n    const response = await fetchWrapper.fetch({\n      request,\n      event,\n      fetchOptions: this._fetchOptions,\n      plugins: this._plugins\n    });\n    const cachePutPromise = cacheWrapper.put({\n      cacheName: this._cacheName,\n      request,\n      response: response.clone(),\n      event,\n      plugins: this._plugins\n    });\n    if (event) {\n      try {\n        event.waitUntil(cachePutPromise);\n      } catch (error) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.warn(`Unable to ensure service worker stays alive when ` + `updating cache for '${getFriendlyURL(request.url)}'.`);\n        }\n      }\n    }\n    return response;\n  }\n}\nexport { StaleWhileRevalidate };","map":{"version":3,"names":["assert","cacheNames","cacheWrapper","fetchWrapper","getFriendlyURL","logger","WorkboxError","messages","cacheOkAndOpaquePlugin","StaleWhileRevalidate","constructor","options","arguments","length","undefined","_cacheName","getRuntimeName","cacheName","_plugins","plugins","isUsingCacheWillUpdate","some","plugin","cacheWillUpdate","_fetchOptions","fetchOptions","_matchOptions","matchOptions","handle","_ref","event","request","logs","Request","process","env","NODE_ENV","isInstance","moduleName","className","funcName","paramName","fetchAndCachePromise","_getFromNetwork","response","match","error","push","waitUntil","warn","url","err","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","_ref2","fetch","cachePutPromise","put","clone"],"sources":["/Users/aliciamedina/Library/Mobile Documents/com~apple~CloudDocs/Work/Proyecto Fin Grado/Electron/Ionic/Chatty-iOS/node_modules/workbox-strategies/StaleWhileRevalidate.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass StaleWhileRevalidate {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        this._plugins = options.plugins || [];\n        if (options.plugins) {\n            const isUsingCacheWillUpdate = options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\n            this._plugins = isUsingCacheWillUpdate ?\n                options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n        }\n        else {\n            // No plugins passed in, use the default plugin.\n            this._plugins = [cacheOkAndOpaquePlugin];\n        }\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'StaleWhileRevalidate',\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = this._getFromNetwork({ request, event });\n        let response = await cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this._cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n            if (event) {\n                try {\n                    event.waitUntil(fetchAndCachePromise);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.warn(`Unable to ensure service worker stays alive when ` +\n                            `updating cache for '${getFriendlyURL(request.url)}'.`);\n                    }\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this._cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                response = await fetchAndCachePromise;\n            }\n            catch (err) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('StaleWhileRevalidate', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getFromNetwork({ request, event }) {\n        const response = await fetchWrapper.fetch({\n            request,\n            event,\n            fetchOptions: this._fetchOptions,\n            plugins: this._plugins,\n        });\n        const cachePutPromise = cacheWrapper.put({\n            cacheName: this._cacheName,\n            request,\n            response: response.clone(),\n            event,\n            plugins: this._plugins,\n        });\n        if (event) {\n            try {\n                event.waitUntil(cachePutPromise);\n            }\n            catch (error) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(`Unable to ensure service worker stays alive when ` +\n                        `updating cache for '${getFriendlyURL(request.url)}'.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}