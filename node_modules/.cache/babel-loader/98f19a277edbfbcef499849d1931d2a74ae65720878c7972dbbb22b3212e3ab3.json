{"ast":null,"code":"import { __rest } from 'tslib';\nimport { createBrowserHistory, createHashHistory } from 'history';\nimport React from 'react';\nimport { matchPath as matchPath$1, withRouter, Router } from 'react-router-dom';\nimport { ViewStacks, generateId, IonRoute, ViewLifeCycleManager, StackContext, RouteManagerContext, getConfig, LocationHistory, NavManager } from '@ionic/react';\nimport { Route, matchPath, Router as Router$1 } from 'react-router';\nclass IonRouteInner extends React.PureComponent {\n  render() {\n    return React.createElement(Route, {\n      path: this.props.path,\n      exact: this.props.exact,\n      render: this.props.render,\n      /**\n       * `computedMatch` is a private API in react-router v5 that\n       * has been removed in v6.\n       *\n       * This needs to be removed when we support v6.\n       *\n       * TODO: FW-647\n       */\n      computedMatch: this.props.computedMatch\n    });\n  }\n}\nclass ReactRouterViewStack extends ViewStacks {\n  constructor() {\n    super();\n    this.createViewItem = this.createViewItem.bind(this);\n    this.findViewItemByRouteInfo = this.findViewItemByRouteInfo.bind(this);\n    this.findLeavingViewItemByRouteInfo = this.findLeavingViewItemByRouteInfo.bind(this);\n    this.getChildrenToRender = this.getChildrenToRender.bind(this);\n    this.findViewItemByPathname = this.findViewItemByPathname.bind(this);\n  }\n  createViewItem(outletId, reactElement, routeInfo, page) {\n    const viewItem = {\n      id: generateId('viewItem'),\n      outletId,\n      ionPageElement: page,\n      reactElement,\n      mount: true,\n      ionRoute: false\n    };\n    const matchProps = {\n      exact: reactElement.props.exact,\n      path: reactElement.props.path || reactElement.props.from,\n      component: reactElement.props.component\n    };\n    const match = matchPath(routeInfo.pathname, matchProps);\n    if (reactElement.type === IonRoute) {\n      viewItem.ionRoute = true;\n      viewItem.disableIonPageManagement = reactElement.props.disableIonPageManagement;\n    }\n    viewItem.routeData = {\n      match,\n      childProps: reactElement.props\n    };\n    return viewItem;\n  }\n  getChildrenToRender(outletId, ionRouterOutlet, routeInfo) {\n    const viewItems = this.getViewItemsForOutlet(outletId);\n    // Sync latest routes with viewItems\n    React.Children.forEach(ionRouterOutlet.props.children, child => {\n      const viewItem = viewItems.find(v => {\n        return matchComponent$1(child, v.routeData.childProps.path || v.routeData.childProps.from);\n      });\n      if (viewItem) {\n        viewItem.reactElement = child;\n      }\n    });\n    const children = viewItems.map(viewItem => {\n      let clonedChild;\n      if (viewItem.ionRoute && !viewItem.disableIonPageManagement) {\n        clonedChild = React.createElement(ViewLifeCycleManager, {\n          key: `view-${viewItem.id}`,\n          mount: viewItem.mount,\n          removeView: () => this.remove(viewItem)\n        }, React.cloneElement(viewItem.reactElement, {\n          computedMatch: viewItem.routeData.match\n        }));\n      } else {\n        const match = matchComponent$1(viewItem.reactElement, routeInfo.pathname);\n        clonedChild = React.createElement(ViewLifeCycleManager, {\n          key: `view-${viewItem.id}`,\n          mount: viewItem.mount,\n          removeView: () => this.remove(viewItem)\n        }, React.cloneElement(viewItem.reactElement, {\n          computedMatch: viewItem.routeData.match\n        }));\n        if (!match && viewItem.routeData.match) {\n          viewItem.routeData.match = undefined;\n          viewItem.mount = false;\n        }\n      }\n      return clonedChild;\n    });\n    return children;\n  }\n  findViewItemByRouteInfo(routeInfo, outletId, updateMatch) {\n    const {\n      viewItem,\n      match\n    } = this.findViewItemByPath(routeInfo.pathname, outletId);\n    const shouldUpdateMatch = updateMatch === undefined || updateMatch === true;\n    if (shouldUpdateMatch && viewItem && match) {\n      viewItem.routeData.match = match;\n    }\n    return viewItem;\n  }\n  findLeavingViewItemByRouteInfo(routeInfo, outletId) {\n    let mustBeIonRoute = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const {\n      viewItem\n    } = this.findViewItemByPath(routeInfo.lastPathname, outletId, false, mustBeIonRoute);\n    return viewItem;\n  }\n  findViewItemByPathname(pathname, outletId) {\n    const {\n      viewItem\n    } = this.findViewItemByPath(pathname, outletId);\n    return viewItem;\n  }\n  findViewItemByPath(pathname, outletId, forceExact, mustBeIonRoute) {\n    let viewItem;\n    let match;\n    let viewStack;\n    if (outletId) {\n      viewStack = this.getViewItemsForOutlet(outletId);\n      viewStack.some(matchView);\n      if (!viewItem) {\n        viewStack.some(matchDefaultRoute);\n      }\n    } else {\n      const viewItems = this.getAllViewItems();\n      viewItems.some(matchView);\n      if (!viewItem) {\n        viewItems.some(matchDefaultRoute);\n      }\n    }\n    return {\n      viewItem,\n      match\n    };\n    function matchView(v) {\n      if (mustBeIonRoute && !v.ionRoute) {\n        return false;\n      }\n      const matchProps = {\n        exact: forceExact ? true : v.routeData.childProps.exact,\n        path: v.routeData.childProps.path || v.routeData.childProps.from,\n        component: v.routeData.childProps.component\n      };\n      const myMatch = matchPath(pathname, matchProps);\n      if (myMatch) {\n        viewItem = v;\n        match = myMatch;\n        return true;\n      }\n      return false;\n    }\n    function matchDefaultRoute(v) {\n      // try to find a route that doesn't have a path or from prop, that will be our default route\n      if (!v.routeData.childProps.path && !v.routeData.childProps.from) {\n        match = {\n          path: pathname,\n          url: pathname,\n          isExact: true,\n          params: {}\n        };\n        viewItem = v;\n        return true;\n      }\n      return false;\n    }\n  }\n}\nfunction matchComponent$1(node, pathname, forceExact) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component\n  };\n  const match = matchPath(pathname, matchProps);\n  return match;\n}\nfunction clonePageElement(leavingViewHtml) {\n  let html;\n  if (typeof leavingViewHtml === 'string') {\n    html = leavingViewHtml;\n  } else {\n    html = leavingViewHtml.outerHTML;\n  }\n  if (document) {\n    const newEl = document.createElement('div');\n    newEl.innerHTML = html;\n    newEl.style.zIndex = '';\n    // Remove an existing back button so the new element doesn't get two of them\n    const ionBackButton = newEl.getElementsByTagName('ion-back-button');\n    if (ionBackButton[0]) {\n      ionBackButton[0].remove();\n    }\n    return newEl.firstChild;\n  }\n  return undefined;\n}\nconst isViewVisible = el => !el.classList.contains('ion-page-invisible') && !el.classList.contains('ion-page-hidden');\nclass StackManager extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.stackContextValue = {\n      registerIonPage: this.registerIonPage.bind(this),\n      isInOutlet: () => true\n    };\n    this.pendingPageTransition = false;\n    this.registerIonPage = this.registerIonPage.bind(this);\n    this.transitionPage = this.transitionPage.bind(this);\n    this.handlePageTransition = this.handlePageTransition.bind(this);\n    this.id = generateId('routerOutlet');\n    this.prevProps = undefined;\n    this.skipTransition = false;\n  }\n  componentDidMount() {\n    if (this.clearOutletTimeout) {\n      /**\n       * The clearOutlet integration with React Router is a bit hacky.\n       * It uses a timeout to clear the outlet after a transition.\n       * In React v18, components are mounted and unmounted in development mode\n       * to check for side effects.\n       *\n       * This clearTimeout prevents the outlet from being cleared when the component is re-mounted,\n       * which should only happen in development mode and as a result of a hot reload.\n       */\n      clearTimeout(this.clearOutletTimeout);\n    }\n    if (this.routerOutletElement) {\n      this.setupRouterOutlet(this.routerOutletElement);\n      this.handlePageTransition(this.props.routeInfo);\n    }\n  }\n  componentDidUpdate(prevProps) {\n    const {\n      pathname\n    } = this.props.routeInfo;\n    const {\n      pathname: prevPathname\n    } = prevProps.routeInfo;\n    if (pathname !== prevPathname) {\n      this.prevProps = prevProps;\n      this.handlePageTransition(this.props.routeInfo);\n    } else if (this.pendingPageTransition) {\n      this.handlePageTransition(this.props.routeInfo);\n      this.pendingPageTransition = false;\n    }\n  }\n  componentWillUnmount() {\n    this.clearOutletTimeout = this.context.clearOutlet(this.id);\n  }\n  async handlePageTransition(routeInfo) {\n    var _a, _b;\n    if (!this.routerOutletElement || !this.routerOutletElement.commit) {\n      /**\n       * The route outlet has not mounted yet. We need to wait for it to render\n       * before we can transition the page.\n       *\n       * Set a flag to indicate that we should transition the page after\n       * the component has updated.\n       */\n      this.pendingPageTransition = true;\n    } else {\n      let enteringViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n      let leavingViewItem = this.context.findLeavingViewItemByRouteInfo(routeInfo, this.id);\n      if (!leavingViewItem && routeInfo.prevRouteLastPathname) {\n        leavingViewItem = this.context.findViewItemByPathname(routeInfo.prevRouteLastPathname, this.id);\n      }\n      // Check if leavingViewItem should be unmounted\n      if (leavingViewItem) {\n        if (routeInfo.routeAction === 'replace') {\n          leavingViewItem.mount = false;\n        } else if (!(routeInfo.routeAction === 'push' && routeInfo.routeDirection === 'forward')) {\n          if (routeInfo.routeDirection !== 'none' && enteringViewItem !== leavingViewItem) {\n            leavingViewItem.mount = false;\n          }\n        } else if ((_a = routeInfo.routeOptions) === null || _a === void 0 ? void 0 : _a.unmount) {\n          leavingViewItem.mount = false;\n        }\n      }\n      const enteringRoute = matchRoute((_b = this.ionRouterOutlet) === null || _b === void 0 ? void 0 : _b.props.children, routeInfo);\n      if (enteringViewItem) {\n        enteringViewItem.reactElement = enteringRoute;\n      } else if (enteringRoute) {\n        enteringViewItem = this.context.createViewItem(this.id, enteringRoute, routeInfo);\n        this.context.addViewItem(enteringViewItem);\n      }\n      if (enteringViewItem && enteringViewItem.ionPageElement) {\n        /**\n         * If the entering view item is the same as the leaving view item,\n         * then we don't need to transition.\n         */\n        if (enteringViewItem === leavingViewItem) {\n          /**\n           * If the entering view item is the same as the leaving view item,\n           * we are either transitioning using parameterized routes to the same view\n           * or a parent router outlet is re-rendering as a result of React props changing.\n           *\n           * If the route data does not match the current path, the parent router outlet\n           * is attempting to transition and we cancel the operation.\n           */\n          if (enteringViewItem.routeData.match.url !== routeInfo.pathname) {\n            return;\n          }\n        }\n        /**\n         * If there isn't a leaving view item, but the route info indicates\n         * that the user has routed from a previous path, then we need\n         * to find the leaving view item to transition between.\n         */\n        if (!leavingViewItem && this.props.routeInfo.prevRouteLastPathname) {\n          leavingViewItem = this.context.findViewItemByPathname(this.props.routeInfo.prevRouteLastPathname, this.id);\n        }\n        /**\n         * If the entering view is already visible and the leaving view is not, the transition does not need to occur.\n         */\n        if (isViewVisible(enteringViewItem.ionPageElement) && leavingViewItem !== undefined && !isViewVisible(leavingViewItem.ionPageElement)) {\n          return;\n        }\n        /**\n         * The view should only be transitioned in the following cases:\n         * 1. Performing a replace or pop action, such as a swipe to go back gesture\n         * to animation the leaving view off the screen.\n         *\n         * 2. Navigating between top-level router outlets, such as /page-1 to /page-2;\n         * or navigating within a nested outlet, such as /tabs/tab-1 to /tabs/tab-2.\n         *\n         * 3. The entering view is an ion-router-outlet containing a page\n         * matching the current route and that hasn't already transitioned in.\n         *\n         * This should only happen when navigating directly to a nested router outlet\n         * route or on an initial page load (i.e. refreshing). In cases when loading\n         * /tabs/tab-1, we need to transition the /tabs page element into the view.\n         */\n        this.transitionPage(routeInfo, enteringViewItem, leavingViewItem);\n      } else if (leavingViewItem && !enteringRoute && !enteringViewItem) {\n        // If we have a leavingView but no entering view/route, we are probably leaving to\n        // another outlet, so hide this leavingView. We do it in a timeout to give time for a\n        // transition to finish.\n        // setTimeout(() => {\n        if (leavingViewItem.ionPageElement) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n        // }, 250);\n      }\n\n      this.forceUpdate();\n    }\n  }\n  registerIonPage(page, routeInfo) {\n    const foundView = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n    if (foundView) {\n      const oldPageElement = foundView.ionPageElement;\n      foundView.ionPageElement = page;\n      foundView.ionRoute = true;\n      /**\n       * React 18 will unmount and remount IonPage\n       * elements in development mode when using createRoot.\n       * This can cause duplicate page transitions to occur.\n       */\n      if (oldPageElement === page) {\n        return;\n      }\n    }\n    this.handlePageTransition(routeInfo);\n  }\n  async setupRouterOutlet(routerOutlet) {\n    const canStart = () => {\n      const config = getConfig();\n      const swipeEnabled = config && config.get('swipeBackEnabled', routerOutlet.mode === 'ios');\n      if (!swipeEnabled) {\n        return false;\n      }\n      const {\n        routeInfo\n      } = this.props;\n      const propsToUse = this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute ? this.prevProps.routeInfo : {\n        pathname: routeInfo.pushedByRoute || ''\n      };\n      const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n      return !!enteringViewItem &&\n      /**\n       * The root url '/' is treated as\n       * the first view item (but is never mounted),\n       * so we do not want to swipe back to the\n       * root url.\n       */\n      enteringViewItem.mount &&\n      /**\n       * When on the first page (whatever view\n       * you land on after the root url) it\n       * is possible for findViewItemByRouteInfo to\n       * return the exact same view you are currently on.\n       * Make sure that we are not swiping back to the same\n       * instances of a view.\n       */\n      enteringViewItem.routeData.match.path !== routeInfo.pathname;\n    };\n    const onStart = async () => {\n      const {\n        routeInfo\n      } = this.props;\n      const propsToUse = this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute ? this.prevProps.routeInfo : {\n        pathname: routeInfo.pushedByRoute || ''\n      };\n      const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n      const leavingViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id, false);\n      /**\n       * When the gesture starts, kick off\n       * a transition that is controlled\n       * via a swipe gesture.\n       */\n      if (enteringViewItem && leavingViewItem) {\n        await this.transitionPage(routeInfo, enteringViewItem, leavingViewItem, 'back', true);\n      }\n      return Promise.resolve();\n    };\n    const onEnd = shouldContinue => {\n      if (shouldContinue) {\n        this.skipTransition = true;\n        this.context.goBack();\n      } else {\n        /**\n         * In the event that the swipe\n         * gesture was aborted, we should\n         * re-hide the page that was going to enter.\n         */\n        const {\n          routeInfo\n        } = this.props;\n        const propsToUse = this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute ? this.prevProps.routeInfo : {\n          pathname: routeInfo.pushedByRoute || ''\n        };\n        const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n        const leavingViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id, false);\n        /**\n         * Ionic React has a design defect where it\n         * a) Unmounts the leaving view item when using parameterized routes\n         * b) Considers the current view to be the entering view when using\n         * parameterized routes\n         *\n         * As a result, we should not hide the view item here\n         * as it will cause the current view to be hidden.\n         */\n        if (enteringViewItem !== leavingViewItem && (enteringViewItem === null || enteringViewItem === void 0 ? void 0 : enteringViewItem.ionPageElement) !== undefined) {\n          const {\n            ionPageElement\n          } = enteringViewItem;\n          ionPageElement.setAttribute('aria-hidden', 'true');\n          ionPageElement.classList.add('ion-page-hidden');\n        }\n      }\n    };\n    routerOutlet.swipeHandler = {\n      canStart,\n      onStart,\n      onEnd\n    };\n  }\n  async transitionPage(routeInfo, enteringViewItem, leavingViewItem, direction) {\n    let progressAnimation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    const runCommit = async (enteringEl, leavingEl) => {\n      const skipTransition = this.skipTransition;\n      /**\n       * If the transition was handled\n       * via the swipe to go back gesture,\n       * then we do not want to perform\n       * another transition.\n       *\n       * We skip adding ion-page or ion-page-invisible\n       * because the entering view already exists in the DOM.\n       * If we added the classes, there would be a flicker where\n       * the view would be briefly hidden.\n       */\n      if (skipTransition) {\n        /**\n         * We need to reset skipTransition before\n         * we call routerOutlet.commit otherwise\n         * the transition triggered by the swipe\n         * to go back gesture would reset it. In\n         * that case you would see a duplicate\n         * transition triggered by handlePageTransition\n         * in componentDidUpdate.\n         */\n        this.skipTransition = false;\n      } else {\n        enteringEl.classList.add('ion-page');\n        enteringEl.classList.add('ion-page-invisible');\n      }\n      await routerOutlet.commit(enteringEl, leavingEl, {\n        deepWait: true,\n        duration: skipTransition || directionToUse === undefined ? 0 : undefined,\n        direction: directionToUse,\n        showGoBack: !!routeInfo.pushedByRoute,\n        progressAnimation,\n        animationBuilder: routeInfo.routeAnimation\n      });\n    };\n    const routerOutlet = this.routerOutletElement;\n    const routeInfoFallbackDirection = routeInfo.routeDirection === 'none' || routeInfo.routeDirection === 'root' ? undefined : routeInfo.routeDirection;\n    const directionToUse = direction !== null && direction !== void 0 ? direction : routeInfoFallbackDirection;\n    if (enteringViewItem && enteringViewItem.ionPageElement && this.routerOutletElement) {\n      if (leavingViewItem && leavingViewItem.ionPageElement && enteringViewItem === leavingViewItem) {\n        // If a page is transitioning to another version of itself\n        // we clone it so we can have an animation to show\n        const match = matchComponent(leavingViewItem.reactElement, routeInfo.pathname, true);\n        if (match) {\n          const newLeavingElement = clonePageElement(leavingViewItem.ionPageElement.outerHTML);\n          if (newLeavingElement) {\n            this.routerOutletElement.appendChild(newLeavingElement);\n            await runCommit(enteringViewItem.ionPageElement, newLeavingElement);\n            this.routerOutletElement.removeChild(newLeavingElement);\n          }\n        } else {\n          await runCommit(enteringViewItem.ionPageElement, undefined);\n        }\n      } else {\n        await runCommit(enteringViewItem.ionPageElement, leavingViewItem === null || leavingViewItem === void 0 ? void 0 : leavingViewItem.ionPageElement);\n        if (leavingViewItem && leavingViewItem.ionPageElement && !progressAnimation) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n  render() {\n    const {\n      children\n    } = this.props;\n    const ionRouterOutlet = React.Children.only(children);\n    this.ionRouterOutlet = ionRouterOutlet;\n    const components = this.context.getChildrenToRender(this.id, this.ionRouterOutlet, this.props.routeInfo, () => {\n      this.forceUpdate();\n    });\n    return React.createElement(StackContext.Provider, {\n      value: this.stackContextValue\n    }, React.cloneElement(ionRouterOutlet, {\n      ref: node => {\n        if (ionRouterOutlet.props.setRef) {\n          ionRouterOutlet.props.setRef(node);\n        }\n        if (ionRouterOutlet.props.forwardedRef) {\n          ionRouterOutlet.props.forwardedRef.current = node;\n        }\n        this.routerOutletElement = node;\n        const {\n          ref\n        } = ionRouterOutlet;\n        if (typeof ref === 'function') {\n          ref(node);\n        }\n      }\n    }, components));\n  }\n  static get contextType() {\n    return RouteManagerContext;\n  }\n}\nfunction matchRoute(node, routeInfo) {\n  let matchedNode;\n  React.Children.forEach(node, child => {\n    const matchProps = {\n      exact: child.props.exact,\n      path: child.props.path || child.props.from,\n      component: child.props.component\n    };\n    const match = matchPath$1(routeInfo.pathname, matchProps);\n    if (match) {\n      matchedNode = child;\n    }\n  });\n  if (matchedNode) {\n    return matchedNode;\n  }\n  // If we haven't found a node\n  // try to find one that doesn't have a path or from prop, that will be our not found route\n  React.Children.forEach(node, child => {\n    if (!(child.props.path || child.props.from)) {\n      matchedNode = child;\n    }\n  });\n  return matchedNode;\n}\nfunction matchComponent(node, pathname, forceExact) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component\n  };\n  const match = matchPath$1(pathname, matchProps);\n  return match;\n}\nclass IonRouterInner extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.exitViewFromOtherOutletHandlers = [];\n    this.locationHistory = new LocationHistory();\n    this.viewStack = new ReactRouterViewStack();\n    this.routeMangerContextState = {\n      canGoBack: () => this.locationHistory.canGoBack(),\n      clearOutlet: this.viewStack.clear,\n      findViewItemByPathname: this.viewStack.findViewItemByPathname,\n      getChildrenToRender: this.viewStack.getChildrenToRender,\n      goBack: () => this.handleNavigateBack(),\n      createViewItem: this.viewStack.createViewItem,\n      findViewItemByRouteInfo: this.viewStack.findViewItemByRouteInfo,\n      findLeavingViewItemByRouteInfo: this.viewStack.findLeavingViewItemByRouteInfo,\n      addViewItem: this.viewStack.add,\n      unMountViewItem: this.viewStack.remove\n    };\n    const routeInfo = {\n      id: generateId('routeInfo'),\n      pathname: this.props.location.pathname,\n      search: this.props.location.search\n    };\n    this.locationHistory.add(routeInfo);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n    this.handleResetTab = this.handleResetTab.bind(this);\n    this.handleNativeBack = this.handleNativeBack.bind(this);\n    this.handleNavigate = this.handleNavigate.bind(this);\n    this.handleNavigateBack = this.handleNavigateBack.bind(this);\n    this.props.registerHistoryListener(this.handleHistoryChange.bind(this));\n    this.handleSetCurrentTab = this.handleSetCurrentTab.bind(this);\n    this.state = {\n      routeInfo\n    };\n  }\n  handleChangeTab(tab, path, routeOptions) {\n    if (!path) {\n      return;\n    }\n    const routeInfo = this.locationHistory.getCurrentRouteInfoForTab(tab);\n    const [pathname, search] = path.split('?');\n    if (routeInfo) {\n      this.incomingRouteParams = Object.assign(Object.assign({}, routeInfo), {\n        routeAction: 'push',\n        routeDirection: 'none'\n      });\n      if (routeInfo.pathname === pathname) {\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(routeInfo.pathname + (routeInfo.search || ''));\n      } else {\n        this.incomingRouteParams.pathname = pathname;\n        this.incomingRouteParams.search = search ? '?' + search : undefined;\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(pathname + (search ? '?' + search : ''));\n      }\n    } else {\n      this.handleNavigate(pathname, 'push', 'none', undefined, routeOptions, tab);\n    }\n  }\n  handleHistoryChange(location, action) {\n    var _a, _b, _c;\n    let leavingLocationInfo;\n    if (this.incomingRouteParams) {\n      if (this.incomingRouteParams.routeAction === 'replace') {\n        leavingLocationInfo = this.locationHistory.previous();\n      } else {\n        leavingLocationInfo = this.locationHistory.current();\n      }\n    } else {\n      leavingLocationInfo = this.locationHistory.current();\n    }\n    const leavingUrl = leavingLocationInfo.pathname + leavingLocationInfo.search;\n    if (leavingUrl !== location.pathname) {\n      if (!this.incomingRouteParams) {\n        if (action === 'REPLACE') {\n          this.incomingRouteParams = {\n            routeAction: 'replace',\n            routeDirection: 'none',\n            tab: this.currentTab\n          };\n        }\n        if (action === 'POP') {\n          const currentRoute = this.locationHistory.current();\n          if (currentRoute && currentRoute.pushedByRoute) {\n            const prevInfo = this.locationHistory.findLastLocation(currentRoute);\n            this.incomingRouteParams = Object.assign(Object.assign({}, prevInfo), {\n              routeAction: 'pop',\n              routeDirection: 'back'\n            });\n          } else {\n            this.incomingRouteParams = {\n              routeAction: 'pop',\n              routeDirection: 'none',\n              tab: this.currentTab\n            };\n          }\n        }\n        if (!this.incomingRouteParams) {\n          this.incomingRouteParams = {\n            routeAction: 'push',\n            routeDirection: ((_a = location.state) === null || _a === void 0 ? void 0 : _a.direction) || 'forward',\n            routeOptions: (_b = location.state) === null || _b === void 0 ? void 0 : _b.routerOptions,\n            tab: this.currentTab\n          };\n        }\n      }\n      let routeInfo;\n      if ((_c = this.incomingRouteParams) === null || _c === void 0 ? void 0 : _c.id) {\n        routeInfo = Object.assign(Object.assign({}, this.incomingRouteParams), {\n          lastPathname: leavingLocationInfo.pathname\n        });\n        this.locationHistory.add(routeInfo);\n      } else {\n        const isPushed = this.incomingRouteParams.routeAction === 'push' && this.incomingRouteParams.routeDirection === 'forward';\n        routeInfo = Object.assign(Object.assign({\n          id: generateId('routeInfo')\n        }, this.incomingRouteParams), {\n          lastPathname: leavingLocationInfo.pathname,\n          pathname: location.pathname,\n          search: location.search,\n          params: this.props.match.params,\n          prevRouteLastPathname: leavingLocationInfo.lastPathname\n        });\n        if (isPushed) {\n          routeInfo.tab = leavingLocationInfo.tab;\n          routeInfo.pushedByRoute = leavingLocationInfo.pathname;\n        } else if (routeInfo.routeAction === 'pop') {\n          const r = this.locationHistory.findLastLocation(routeInfo);\n          routeInfo.pushedByRoute = r === null || r === void 0 ? void 0 : r.pushedByRoute;\n        } else if (routeInfo.routeAction === 'push' && routeInfo.tab !== leavingLocationInfo.tab) {\n          // If we are switching tabs grab the last route info for the tab and use its pushedByRoute\n          const lastRoute = this.locationHistory.getCurrentRouteInfoForTab(routeInfo.tab);\n          routeInfo.pushedByRoute = lastRoute === null || lastRoute === void 0 ? void 0 : lastRoute.pushedByRoute;\n        } else if (routeInfo.routeAction === 'replace') {\n          // Make sure to set the lastPathname, etc.. to the current route so the page transitions out\n          const currentRouteInfo = this.locationHistory.current();\n          /**\n           * If going from /home to /child, then replacing from\n           * /child to /home, we don't want the route info to\n           * say that /home was pushed by /home which is not correct.\n           */\n          const currentPushedBy = currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.pushedByRoute;\n          const pushedByRoute = currentPushedBy !== undefined && currentPushedBy !== routeInfo.pathname ? currentPushedBy : routeInfo.pushedByRoute;\n          routeInfo.lastPathname = (currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.pathname) || routeInfo.lastPathname;\n          routeInfo.prevRouteLastPathname = currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.lastPathname;\n          routeInfo.pushedByRoute = pushedByRoute;\n          routeInfo.routeDirection = (currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.routeDirection) || routeInfo.routeDirection;\n          routeInfo.routeAnimation = (currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.routeAnimation) || routeInfo.routeAnimation;\n        }\n        this.locationHistory.add(routeInfo);\n      }\n      this.setState({\n        routeInfo\n      });\n    }\n    this.incomingRouteParams = undefined;\n  }\n  /**\n   * history@4.x uses goBack(), history@5.x uses back()\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just\n   * assume back() is available.\n   */\n  handleNativeBack() {\n    const history = this.props.history;\n    const goBack = history.goBack || history.back;\n    goBack();\n  }\n  handleNavigate(path, routeAction, routeDirection, routeAnimation, routeOptions, tab) {\n    this.incomingRouteParams = Object.assign(this.incomingRouteParams || {}, {\n      routeAction,\n      routeDirection,\n      routeOptions,\n      routeAnimation,\n      tab\n    });\n    if (routeAction === 'push') {\n      this.props.history.push(path);\n    } else {\n      this.props.history.replace(path);\n    }\n  }\n  handleNavigateBack() {\n    let defaultHref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n    let routeAnimation = arguments.length > 1 ? arguments[1] : undefined;\n    const config = getConfig();\n    defaultHref = defaultHref ? defaultHref : config && config.get('backButtonDefaultHref');\n    const routeInfo = this.locationHistory.current();\n    if (routeInfo && routeInfo.pushedByRoute) {\n      const prevInfo = this.locationHistory.findLastLocation(routeInfo);\n      if (prevInfo) {\n        this.incomingRouteParams = Object.assign(Object.assign({}, prevInfo), {\n          routeAction: 'pop',\n          routeDirection: 'back',\n          routeAnimation: routeAnimation || routeInfo.routeAnimation\n        });\n        if (routeInfo.lastPathname === routeInfo.pushedByRoute ||\n        /**\n         * We need to exclude tab switches/tab\n         * context changes here because tabbed\n         * navigation is not linear, but router.back()\n         * will go back in a linear fashion.\n         */\n        prevInfo.pathname === routeInfo.pushedByRoute && routeInfo.tab === '' && prevInfo.tab === '') {\n          /**\n           * history@4.x uses goBack(), history@5.x uses back()\n           * TODO: If support for React Router <=5 is dropped\n           * this logic is no longer needed. We can just\n           * assume back() is available.\n           */\n          const history = this.props.history;\n          const goBack = history.goBack || history.back;\n          goBack();\n        } else {\n          this.handleNavigate(prevInfo.pathname + (prevInfo.search || ''), 'pop', 'back');\n        }\n      } else {\n        this.handleNavigate(defaultHref, 'pop', 'back');\n      }\n    } else {\n      this.handleNavigate(defaultHref, 'pop', 'back');\n    }\n  }\n  handleResetTab(tab, originalHref, originalRouteOptions) {\n    const routeInfo = this.locationHistory.getFirstRouteInfoForTab(tab);\n    if (routeInfo) {\n      const newRouteInfo = Object.assign({}, routeInfo);\n      newRouteInfo.pathname = originalHref;\n      newRouteInfo.routeOptions = originalRouteOptions;\n      this.incomingRouteParams = Object.assign(Object.assign({}, newRouteInfo), {\n        routeAction: 'pop',\n        routeDirection: 'back'\n      });\n      this.props.history.push(newRouteInfo.pathname + (newRouteInfo.search || ''));\n    }\n  }\n  handleSetCurrentTab(tab) {\n    this.currentTab = tab;\n    const ri = Object.assign({}, this.locationHistory.current());\n    if (ri.tab !== tab) {\n      ri.tab = tab;\n      this.locationHistory.update(ri);\n    }\n  }\n  render() {\n    return React.createElement(RouteManagerContext.Provider, {\n      value: this.routeMangerContextState\n    }, React.createElement(NavManager, {\n      ionRoute: IonRouteInner,\n      ionRedirect: {},\n      stackManager: StackManager,\n      routeInfo: this.state.routeInfo,\n      onNativeBack: this.handleNativeBack,\n      onNavigateBack: this.handleNavigateBack,\n      onNavigate: this.handleNavigate,\n      onSetCurrentTab: this.handleSetCurrentTab,\n      onChangeTab: this.handleChangeTab,\n      onResetTab: this.handleResetTab,\n      locationHistory: this.locationHistory\n    }, this.props.children));\n  }\n}\nconst IonRouter = withRouter(IonRouterInner);\nIonRouter.displayName = 'IonRouter';\nclass IonReactRouter extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n        history\n      } = props,\n      rest = __rest(props, [\"history\"]);\n    this.history = history || createBrowserHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location, action) {\n    const locationValue = location.location || location;\n    const actionValue = location.action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n  registerHistoryListener(cb) {\n    this.historyListenHandler = cb;\n  }\n  render() {\n    const _a = this.props,\n      {\n        children\n      } = _a,\n      props = __rest(_a, [\"children\"]);\n    return React.createElement(Router, Object.assign({\n      history: this.history\n    }, props), React.createElement(IonRouter, {\n      registerHistoryListener: this.registerHistoryListener\n    }, children));\n  }\n}\nclass IonReactMemoryRouter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.history = props.history;\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location, action) {\n    const locationValue = location.location || location;\n    const actionValue = location.action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n  registerHistoryListener(cb) {\n    this.historyListenHandler = cb;\n  }\n  render() {\n    const _a = this.props,\n      {\n        children\n      } = _a,\n      props = __rest(_a, [\"children\"]);\n    return React.createElement(Router$1, Object.assign({}, props), React.createElement(IonRouter, {\n      registerHistoryListener: this.registerHistoryListener\n    }, children));\n  }\n}\nclass IonReactHashRouter extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n        history\n      } = props,\n      rest = __rest(props, [\"history\"]);\n    this.history = history || createHashHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location, action) {\n    const locationValue = location.location || location;\n    const actionValue = location.action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n  registerHistoryListener(cb) {\n    this.historyListenHandler = cb;\n  }\n  render() {\n    const _a = this.props,\n      {\n        children\n      } = _a,\n      props = __rest(_a, [\"children\"]);\n    return React.createElement(Router, Object.assign({\n      history: this.history\n    }, props), React.createElement(IonRouter, {\n      registerHistoryListener: this.registerHistoryListener\n    }, children));\n  }\n}\nexport { IonReactHashRouter, IonReactMemoryRouter, IonReactRouter };","map":{"version":3,"names":["IonRouteInner","React","PureComponent","render","createElement","Route","path","props","exact","computedMatch","ReactRouterViewStack","ViewStacks","constructor","createViewItem","bind","findViewItemByRouteInfo","findLeavingViewItemByRouteInfo","getChildrenToRender","findViewItemByPathname","outletId","reactElement","routeInfo","page","viewItem","id","generateId","ionPageElement","mount","ionRoute","matchProps","from","component","match","matchPath","pathname","type","IonRoute","disableIonPageManagement","routeData","childProps","ionRouterOutlet","viewItems","getViewItemsForOutlet","Children","forEach","children","child","find","v","matchComponent$1","map","clonedChild","ViewLifeCycleManager","key","removeView","remove","cloneElement","undefined","updateMatch","findViewItemByPath","shouldUpdateMatch","mustBeIonRoute","arguments","length","lastPathname","forceExact","viewStack","some","matchView","matchDefaultRoute","getAllViewItems","myMatch","url","isExact","params","matchComponent","node","clonePageElement","leavingViewHtml","html","outerHTML","document","newEl","innerHTML","style","zIndex","ionBackButton","getElementsByTagName","firstChild","isViewVisible","el","classList","contains","StackManager","stackContextValue","registerIonPage","isInOutlet","pendingPageTransition","transitionPage","handlePageTransition","prevProps","skipTransition","componentDidMount","clearOutletTimeout","clearTimeout","routerOutletElement","setupRouterOutlet","componentDidUpdate","prevPathname","componentWillUnmount","context","clearOutlet","commit","enteringViewItem","leavingViewItem","prevRouteLastPathname","routeAction","routeDirection","_a","routeOptions","unmount","enteringRoute","matchRoute","_b","addViewItem","add","setAttribute","forceUpdate","foundView","oldPageElement","routerOutlet","canStart","config","getConfig","swipeEnabled","get","mode","propsToUse","pushedByRoute","onStart","Promise","resolve","onEnd","shouldContinue","goBack","swipeHandler","direction","progressAnimation","runCommit","enteringEl","leavingEl","deepWait","duration","directionToUse","showGoBack","animationBuilder","routeAnimation","routeInfoFallbackDirection","newLeavingElement","appendChild","removeChild","only","components","StackContext","Provider","value","ref","setRef","forwardedRef","current","contextType","RouteManagerContext","matchedNode","matchPath$1","IonRouterInner","exitViewFromOtherOutletHandlers","locationHistory","LocationHistory","routeMangerContextState","canGoBack","clear","handleNavigateBack","unMountViewItem","location","search","handleChangeTab","handleResetTab","handleNativeBack","handleNavigate","registerHistoryListener","handleHistoryChange","handleSetCurrentTab","state","tab","getCurrentRouteInfoForTab","split","incomingRouteParams","Object","assign","history","push","action","leavingLocationInfo","previous","leavingUrl","currentTab","currentRoute","prevInfo","findLastLocation","routerOptions","_c","isPushed","r","lastRoute","currentRouteInfo","currentPushedBy","setState","back","replace","defaultHref","originalHref","originalRouteOptions","getFirstRouteInfoForTab","newRouteInfo","ri","update","NavManager","ionRedirect","stackManager","onNativeBack","onNavigateBack","onNavigate","onSetCurrentTab","onChangeTab","onResetTab","IonRouter","withRouter","displayName","IonReactRouter","Component","rest","__rest","createBrowserHistory","listen","locationValue","actionValue","historyListenHandler","cb","Router","IonReactMemoryRouter","Router$1","IonReactHashRouter","createHashHistory"],"sources":["/Users/aliciamedina/Library/Mobile Documents/com~apple~CloudDocs/Work/Proyecto Fin Grado/Electron/Ionic/Chatty-iOS/node_modules/@ionic/react-router/src/ReactRouter/IonRouteInner.tsx","/Users/aliciamedina/Library/Mobile Documents/com~apple~CloudDocs/Work/Proyecto Fin Grado/Electron/Ionic/Chatty-iOS/node_modules/@ionic/react-router/src/ReactRouter/ReactRouterViewStack.tsx","/Users/aliciamedina/Library/Mobile Documents/com~apple~CloudDocs/Work/Proyecto Fin Grado/Electron/Ionic/Chatty-iOS/node_modules/@ionic/react-router/src/ReactRouter/clonePageElement.ts","/Users/aliciamedina/Library/Mobile Documents/com~apple~CloudDocs/Work/Proyecto Fin Grado/Electron/Ionic/Chatty-iOS/node_modules/@ionic/react-router/src/ReactRouter/StackManager.tsx","/Users/aliciamedina/Library/Mobile Documents/com~apple~CloudDocs/Work/Proyecto Fin Grado/Electron/Ionic/Chatty-iOS/node_modules/@ionic/react-router/src/ReactRouter/IonRouter.tsx","/Users/aliciamedina/Library/Mobile Documents/com~apple~CloudDocs/Work/Proyecto Fin Grado/Electron/Ionic/Chatty-iOS/node_modules/@ionic/react-router/src/ReactRouter/IonReactRouter.tsx","/Users/aliciamedina/Library/Mobile Documents/com~apple~CloudDocs/Work/Proyecto Fin Grado/Electron/Ionic/Chatty-iOS/node_modules/@ionic/react-router/src/ReactRouter/IonReactMemoryRouter.tsx","/Users/aliciamedina/Library/Mobile Documents/com~apple~CloudDocs/Work/Proyecto Fin Grado/Electron/Ionic/Chatty-iOS/node_modules/@ionic/react-router/src/ReactRouter/IonReactHashRouter.tsx"],"sourcesContent":["import type { IonRouteProps } from '@ionic/react';\nimport React from 'react';\nimport { Route } from 'react-router';\n\nexport class IonRouteInner extends React.PureComponent<IonRouteProps> {\n  render() {\n    return (\n      <Route\n        path={this.props.path}\n        exact={this.props.exact}\n        render={this.props.render}\n        /**\n         * `computedMatch` is a private API in react-router v5 that\n         * has been removed in v6.\n         *\n         * This needs to be removed when we support v6.\n         *\n         * TODO: FW-647\n         */\n        computedMatch={(this.props as any).computedMatch}\n      />\n    );\n  }\n}\n","import type { RouteInfo, ViewItem } from '@ionic/react';\nimport { IonRoute, ViewLifeCycleManager, ViewStacks, generateId } from '@ionic/react';\nimport React from 'react';\nimport { matchPath } from 'react-router';\n\nexport class ReactRouterViewStack extends ViewStacks {\n  constructor() {\n    super();\n    this.createViewItem = this.createViewItem.bind(this);\n    this.findViewItemByRouteInfo = this.findViewItemByRouteInfo.bind(this);\n    this.findLeavingViewItemByRouteInfo = this.findLeavingViewItemByRouteInfo.bind(this);\n    this.getChildrenToRender = this.getChildrenToRender.bind(this);\n    this.findViewItemByPathname = this.findViewItemByPathname.bind(this);\n  }\n\n  createViewItem(outletId: string, reactElement: React.ReactElement, routeInfo: RouteInfo, page?: HTMLElement) {\n    const viewItem: ViewItem = {\n      id: generateId('viewItem'),\n      outletId,\n      ionPageElement: page,\n      reactElement,\n      mount: true,\n      ionRoute: false,\n    };\n\n    const matchProps = {\n      exact: reactElement.props.exact,\n      path: reactElement.props.path || reactElement.props.from,\n      component: reactElement.props.component,\n    };\n\n    const match = matchPath(routeInfo.pathname, matchProps);\n\n    if (reactElement.type === IonRoute) {\n      viewItem.ionRoute = true;\n      viewItem.disableIonPageManagement = reactElement.props.disableIonPageManagement;\n    }\n\n    viewItem.routeData = {\n      match,\n      childProps: reactElement.props,\n    };\n\n    return viewItem;\n  }\n\n  getChildrenToRender(outletId: string, ionRouterOutlet: React.ReactElement, routeInfo: RouteInfo) {\n    const viewItems = this.getViewItemsForOutlet(outletId);\n\n    // Sync latest routes with viewItems\n    React.Children.forEach(ionRouterOutlet.props.children, (child: React.ReactElement) => {\n      const viewItem = viewItems.find((v) => {\n        return matchComponent(child, v.routeData.childProps.path || v.routeData.childProps.from);\n      });\n      if (viewItem) {\n        viewItem.reactElement = child;\n      }\n    });\n\n    const children = viewItems.map((viewItem) => {\n      let clonedChild;\n      if (viewItem.ionRoute && !viewItem.disableIonPageManagement) {\n        clonedChild = (\n          <ViewLifeCycleManager\n            key={`view-${viewItem.id}`}\n            mount={viewItem.mount}\n            removeView={() => this.remove(viewItem)}\n          >\n            {React.cloneElement(viewItem.reactElement, {\n              computedMatch: viewItem.routeData.match,\n            })}\n          </ViewLifeCycleManager>\n        );\n      } else {\n        const match = matchComponent(viewItem.reactElement, routeInfo.pathname);\n        clonedChild = (\n          <ViewLifeCycleManager\n            key={`view-${viewItem.id}`}\n            mount={viewItem.mount}\n            removeView={() => this.remove(viewItem)}\n          >\n            {React.cloneElement(viewItem.reactElement, {\n              computedMatch: viewItem.routeData.match,\n            })}\n          </ViewLifeCycleManager>\n        );\n\n        if (!match && viewItem.routeData.match) {\n          viewItem.routeData.match = undefined;\n          viewItem.mount = false;\n        }\n      }\n\n      return clonedChild;\n    });\n    return children;\n  }\n\n  findViewItemByRouteInfo(routeInfo: RouteInfo, outletId?: string, updateMatch?: boolean) {\n    const { viewItem, match } = this.findViewItemByPath(routeInfo.pathname, outletId);\n    const shouldUpdateMatch = updateMatch === undefined || updateMatch === true;\n    if (shouldUpdateMatch && viewItem && match) {\n      viewItem.routeData.match = match;\n    }\n    return viewItem;\n  }\n\n  findLeavingViewItemByRouteInfo(routeInfo: RouteInfo, outletId?: string, mustBeIonRoute = true) {\n    const { viewItem } = this.findViewItemByPath(routeInfo.lastPathname!, outletId, false, mustBeIonRoute);\n    return viewItem;\n  }\n\n  findViewItemByPathname(pathname: string, outletId?: string) {\n    const { viewItem } = this.findViewItemByPath(pathname, outletId);\n    return viewItem;\n  }\n\n  private findViewItemByPath(pathname: string, outletId?: string, forceExact?: boolean, mustBeIonRoute?: boolean) {\n    let viewItem: ViewItem | undefined;\n    let match: ReturnType<typeof matchPath> | undefined;\n    let viewStack: ViewItem[];\n\n    if (outletId) {\n      viewStack = this.getViewItemsForOutlet(outletId);\n      viewStack.some(matchView);\n      if (!viewItem) {\n        viewStack.some(matchDefaultRoute);\n      }\n    } else {\n      const viewItems = this.getAllViewItems();\n      viewItems.some(matchView);\n      if (!viewItem) {\n        viewItems.some(matchDefaultRoute);\n      }\n    }\n\n    return { viewItem, match };\n\n    function matchView(v: ViewItem) {\n      if (mustBeIonRoute && !v.ionRoute) {\n        return false;\n      }\n      const matchProps = {\n        exact: forceExact ? true : v.routeData.childProps.exact,\n        path: v.routeData.childProps.path || v.routeData.childProps.from,\n        component: v.routeData.childProps.component,\n      };\n      const myMatch = matchPath(pathname, matchProps);\n      if (myMatch) {\n        viewItem = v;\n        match = myMatch;\n        return true;\n      }\n      return false;\n    }\n\n    function matchDefaultRoute(v: ViewItem) {\n      // try to find a route that doesn't have a path or from prop, that will be our default route\n      if (!v.routeData.childProps.path && !v.routeData.childProps.from) {\n        match = {\n          path: pathname,\n          url: pathname,\n          isExact: true,\n          params: {},\n        };\n        viewItem = v;\n        return true;\n      }\n      return false;\n    }\n  }\n}\n\nfunction matchComponent(node: React.ReactElement, pathname: string, forceExact?: boolean) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component,\n  };\n  const match = matchPath(pathname, matchProps);\n\n  return match;\n}\n","export function clonePageElement(leavingViewHtml: string | HTMLElement) {\n  let html: string;\n  if (typeof leavingViewHtml === 'string') {\n    html = leavingViewHtml;\n  } else {\n    html = leavingViewHtml.outerHTML;\n  }\n  if (document) {\n    const newEl = document.createElement('div');\n    newEl.innerHTML = html;\n    newEl.style.zIndex = '';\n    // Remove an existing back button so the new element doesn't get two of them\n    const ionBackButton = newEl.getElementsByTagName('ion-back-button');\n    if (ionBackButton[0]) {\n      ionBackButton[0].remove();\n    }\n    return newEl.firstChild as HTMLElement;\n  }\n  return undefined;\n}\n","import type { RouteInfo, StackContextState, ViewItem } from '@ionic/react';\nimport { RouteManagerContext, StackContext, generateId, getConfig } from '@ionic/react';\nimport React from 'react';\nimport { matchPath } from 'react-router-dom';\n\nimport { clonePageElement } from './clonePageElement';\n\n// TODO(FW-2959): types\n\ninterface StackManagerProps {\n  routeInfo: RouteInfo;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface StackManagerState {}\n\nconst isViewVisible = (el: HTMLElement) =>\n  !el.classList.contains('ion-page-invisible') && !el.classList.contains('ion-page-hidden');\n\nexport class StackManager extends React.PureComponent<StackManagerProps, StackManagerState> {\n  id: string;\n  context!: React.ContextType<typeof RouteManagerContext>;\n  ionRouterOutlet?: React.ReactElement;\n  routerOutletElement: HTMLIonRouterOutletElement | undefined;\n  prevProps?: StackManagerProps;\n  skipTransition: boolean;\n\n  stackContextValue: StackContextState = {\n    registerIonPage: this.registerIonPage.bind(this),\n    isInOutlet: () => true,\n  };\n\n  private clearOutletTimeout: any;\n  private pendingPageTransition = false;\n\n  constructor(props: StackManagerProps) {\n    super(props);\n    this.registerIonPage = this.registerIonPage.bind(this);\n    this.transitionPage = this.transitionPage.bind(this);\n    this.handlePageTransition = this.handlePageTransition.bind(this);\n    this.id = generateId('routerOutlet');\n    this.prevProps = undefined;\n    this.skipTransition = false;\n  }\n\n  componentDidMount() {\n    if (this.clearOutletTimeout) {\n      /**\n       * The clearOutlet integration with React Router is a bit hacky.\n       * It uses a timeout to clear the outlet after a transition.\n       * In React v18, components are mounted and unmounted in development mode\n       * to check for side effects.\n       *\n       * This clearTimeout prevents the outlet from being cleared when the component is re-mounted,\n       * which should only happen in development mode and as a result of a hot reload.\n       */\n      clearTimeout(this.clearOutletTimeout);\n    }\n    if (this.routerOutletElement) {\n      this.setupRouterOutlet(this.routerOutletElement);\n      this.handlePageTransition(this.props.routeInfo);\n    }\n  }\n\n  componentDidUpdate(prevProps: StackManagerProps) {\n    const { pathname } = this.props.routeInfo;\n    const { pathname: prevPathname } = prevProps.routeInfo;\n\n    if (pathname !== prevPathname) {\n      this.prevProps = prevProps;\n      this.handlePageTransition(this.props.routeInfo);\n    } else if (this.pendingPageTransition) {\n      this.handlePageTransition(this.props.routeInfo);\n      this.pendingPageTransition = false;\n    }\n  }\n\n  componentWillUnmount() {\n    this.clearOutletTimeout = this.context.clearOutlet(this.id);\n  }\n\n  async handlePageTransition(routeInfo: RouteInfo) {\n    if (!this.routerOutletElement || !this.routerOutletElement.commit) {\n      /**\n       * The route outlet has not mounted yet. We need to wait for it to render\n       * before we can transition the page.\n       *\n       * Set a flag to indicate that we should transition the page after\n       * the component has updated.\n       */\n      this.pendingPageTransition = true;\n    } else {\n      let enteringViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n      let leavingViewItem = this.context.findLeavingViewItemByRouteInfo(routeInfo, this.id);\n\n      if (!leavingViewItem && routeInfo.prevRouteLastPathname) {\n        leavingViewItem = this.context.findViewItemByPathname(routeInfo.prevRouteLastPathname, this.id);\n      }\n\n      // Check if leavingViewItem should be unmounted\n      if (leavingViewItem) {\n        if (routeInfo.routeAction === 'replace') {\n          leavingViewItem.mount = false;\n        } else if (!(routeInfo.routeAction === 'push' && routeInfo.routeDirection === 'forward')) {\n          if (routeInfo.routeDirection !== 'none' && enteringViewItem !== leavingViewItem) {\n            leavingViewItem.mount = false;\n          }\n        } else if (routeInfo.routeOptions?.unmount) {\n          leavingViewItem.mount = false;\n        }\n      }\n\n      const enteringRoute = matchRoute(this.ionRouterOutlet?.props.children, routeInfo) as React.ReactElement;\n\n      if (enteringViewItem) {\n        enteringViewItem.reactElement = enteringRoute;\n      } else if (enteringRoute) {\n        enteringViewItem = this.context.createViewItem(this.id, enteringRoute, routeInfo);\n        this.context.addViewItem(enteringViewItem);\n      }\n\n      if (enteringViewItem && enteringViewItem.ionPageElement) {\n        /**\n         * If the entering view item is the same as the leaving view item,\n         * then we don't need to transition.\n         */\n        if (enteringViewItem === leavingViewItem) {\n          /**\n           * If the entering view item is the same as the leaving view item,\n           * we are either transitioning using parameterized routes to the same view\n           * or a parent router outlet is re-rendering as a result of React props changing.\n           *\n           * If the route data does not match the current path, the parent router outlet\n           * is attempting to transition and we cancel the operation.\n           */\n          if (enteringViewItem.routeData.match.url !== routeInfo.pathname) {\n            return;\n          }\n        }\n\n        /**\n         * If there isn't a leaving view item, but the route info indicates\n         * that the user has routed from a previous path, then we need\n         * to find the leaving view item to transition between.\n         */\n        if (!leavingViewItem && this.props.routeInfo.prevRouteLastPathname) {\n          leavingViewItem = this.context.findViewItemByPathname(this.props.routeInfo.prevRouteLastPathname, this.id);\n        }\n\n        /**\n         * If the entering view is already visible and the leaving view is not, the transition does not need to occur.\n         */\n        if (\n          isViewVisible(enteringViewItem.ionPageElement) &&\n          leavingViewItem !== undefined &&\n          !isViewVisible(leavingViewItem.ionPageElement!)\n        ) {\n          return;\n        }\n\n        /**\n         * The view should only be transitioned in the following cases:\n         * 1. Performing a replace or pop action, such as a swipe to go back gesture\n         * to animation the leaving view off the screen.\n         *\n         * 2. Navigating between top-level router outlets, such as /page-1 to /page-2;\n         * or navigating within a nested outlet, such as /tabs/tab-1 to /tabs/tab-2.\n         *\n         * 3. The entering view is an ion-router-outlet containing a page\n         * matching the current route and that hasn't already transitioned in.\n         *\n         * This should only happen when navigating directly to a nested router outlet\n         * route or on an initial page load (i.e. refreshing). In cases when loading\n         * /tabs/tab-1, we need to transition the /tabs page element into the view.\n         */\n        this.transitionPage(routeInfo, enteringViewItem, leavingViewItem);\n      } else if (leavingViewItem && !enteringRoute && !enteringViewItem) {\n        // If we have a leavingView but no entering view/route, we are probably leaving to\n        // another outlet, so hide this leavingView. We do it in a timeout to give time for a\n        // transition to finish.\n        // setTimeout(() => {\n        if (leavingViewItem.ionPageElement) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n        // }, 250);\n      }\n\n      this.forceUpdate();\n    }\n  }\n\n  registerIonPage(page: HTMLElement, routeInfo: RouteInfo) {\n    const foundView = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n    if (foundView) {\n      const oldPageElement = foundView.ionPageElement;\n      foundView.ionPageElement = page;\n      foundView.ionRoute = true;\n\n      /**\n       * React 18 will unmount and remount IonPage\n       * elements in development mode when using createRoot.\n       * This can cause duplicate page transitions to occur.\n       */\n      if (oldPageElement === page) {\n        return;\n      }\n    }\n    this.handlePageTransition(routeInfo);\n  }\n\n  async setupRouterOutlet(routerOutlet: HTMLIonRouterOutletElement) {\n    const canStart = () => {\n      const config = getConfig();\n      const swipeEnabled = config && config.get('swipeBackEnabled', routerOutlet.mode === 'ios');\n      if (!swipeEnabled) {\n        return false;\n      }\n\n      const { routeInfo } = this.props;\n\n      const propsToUse =\n        this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute\n          ? this.prevProps.routeInfo\n          : ({ pathname: routeInfo.pushedByRoute || '' } as any);\n      const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n\n      return (\n        !!enteringViewItem &&\n        /**\n         * The root url '/' is treated as\n         * the first view item (but is never mounted),\n         * so we do not want to swipe back to the\n         * root url.\n         */\n        enteringViewItem.mount &&\n        /**\n         * When on the first page (whatever view\n         * you land on after the root url) it\n         * is possible for findViewItemByRouteInfo to\n         * return the exact same view you are currently on.\n         * Make sure that we are not swiping back to the same\n         * instances of a view.\n         */\n        enteringViewItem.routeData.match.path !== routeInfo.pathname\n      );\n    };\n\n    const onStart = async () => {\n      const { routeInfo } = this.props;\n\n      const propsToUse =\n        this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute\n          ? this.prevProps.routeInfo\n          : ({ pathname: routeInfo.pushedByRoute || '' } as any);\n      const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n      const leavingViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id, false);\n\n      /**\n       * When the gesture starts, kick off\n       * a transition that is controlled\n       * via a swipe gesture.\n       */\n      if (enteringViewItem && leavingViewItem) {\n        await this.transitionPage(routeInfo, enteringViewItem, leavingViewItem, 'back', true);\n      }\n\n      return Promise.resolve();\n    };\n    const onEnd = (shouldContinue: boolean) => {\n      if (shouldContinue) {\n        this.skipTransition = true;\n\n        this.context.goBack();\n      } else {\n        /**\n         * In the event that the swipe\n         * gesture was aborted, we should\n         * re-hide the page that was going to enter.\n         */\n        const { routeInfo } = this.props;\n\n        const propsToUse =\n          this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute\n            ? this.prevProps.routeInfo\n            : ({ pathname: routeInfo.pushedByRoute || '' } as any);\n        const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n        const leavingViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id, false);\n\n        /**\n         * Ionic React has a design defect where it\n         * a) Unmounts the leaving view item when using parameterized routes\n         * b) Considers the current view to be the entering view when using\n         * parameterized routes\n         *\n         * As a result, we should not hide the view item here\n         * as it will cause the current view to be hidden.\n         */\n        if (enteringViewItem !== leavingViewItem && enteringViewItem?.ionPageElement !== undefined) {\n          const { ionPageElement } = enteringViewItem;\n          ionPageElement.setAttribute('aria-hidden', 'true');\n          ionPageElement.classList.add('ion-page-hidden');\n        }\n      }\n    };\n\n    routerOutlet.swipeHandler = {\n      canStart,\n      onStart,\n      onEnd,\n    };\n  }\n\n  async transitionPage(\n    routeInfo: RouteInfo,\n    enteringViewItem: ViewItem,\n    leavingViewItem?: ViewItem,\n    direction?: 'forward' | 'back',\n    progressAnimation = false\n  ) {\n    const runCommit = async (enteringEl: HTMLElement, leavingEl?: HTMLElement) => {\n      const skipTransition = this.skipTransition;\n\n      /**\n       * If the transition was handled\n       * via the swipe to go back gesture,\n       * then we do not want to perform\n       * another transition.\n       *\n       * We skip adding ion-page or ion-page-invisible\n       * because the entering view already exists in the DOM.\n       * If we added the classes, there would be a flicker where\n       * the view would be briefly hidden.\n       */\n      if (skipTransition) {\n        /**\n         * We need to reset skipTransition before\n         * we call routerOutlet.commit otherwise\n         * the transition triggered by the swipe\n         * to go back gesture would reset it. In\n         * that case you would see a duplicate\n         * transition triggered by handlePageTransition\n         * in componentDidUpdate.\n         */\n        this.skipTransition = false;\n      } else {\n        enteringEl.classList.add('ion-page');\n        enteringEl.classList.add('ion-page-invisible');\n      }\n\n      await routerOutlet.commit(enteringEl, leavingEl, {\n        deepWait: true,\n        duration: skipTransition || directionToUse === undefined ? 0 : undefined,\n        direction: directionToUse,\n        showGoBack: !!routeInfo.pushedByRoute,\n        progressAnimation,\n        animationBuilder: routeInfo.routeAnimation,\n      });\n    };\n\n    const routerOutlet = this.routerOutletElement!;\n\n    const routeInfoFallbackDirection =\n      routeInfo.routeDirection === 'none' || routeInfo.routeDirection === 'root' ? undefined : routeInfo.routeDirection;\n    const directionToUse = direction ?? routeInfoFallbackDirection;\n\n    if (enteringViewItem && enteringViewItem.ionPageElement && this.routerOutletElement) {\n      if (leavingViewItem && leavingViewItem.ionPageElement && enteringViewItem === leavingViewItem) {\n        // If a page is transitioning to another version of itself\n        // we clone it so we can have an animation to show\n\n        const match = matchComponent(leavingViewItem.reactElement, routeInfo.pathname, true);\n        if (match) {\n          const newLeavingElement = clonePageElement(leavingViewItem.ionPageElement.outerHTML);\n          if (newLeavingElement) {\n            this.routerOutletElement.appendChild(newLeavingElement);\n            await runCommit(enteringViewItem.ionPageElement, newLeavingElement);\n            this.routerOutletElement.removeChild(newLeavingElement);\n          }\n        } else {\n          await runCommit(enteringViewItem.ionPageElement, undefined);\n        }\n      } else {\n        await runCommit(enteringViewItem.ionPageElement, leavingViewItem?.ionPageElement);\n        if (leavingViewItem && leavingViewItem.ionPageElement && !progressAnimation) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  render() {\n    const { children } = this.props;\n    const ionRouterOutlet = React.Children.only(children) as React.ReactElement;\n    this.ionRouterOutlet = ionRouterOutlet;\n\n    const components = this.context.getChildrenToRender(this.id, this.ionRouterOutlet, this.props.routeInfo, () => {\n      this.forceUpdate();\n    });\n\n    return (\n      <StackContext.Provider value={this.stackContextValue}>\n        {React.cloneElement(\n          ionRouterOutlet as any,\n          {\n            ref: (node: HTMLIonRouterOutletElement) => {\n              if (ionRouterOutlet.props.setRef) {\n                ionRouterOutlet.props.setRef(node);\n              }\n              if (ionRouterOutlet.props.forwardedRef) {\n                ionRouterOutlet.props.forwardedRef.current = node;\n              }\n              this.routerOutletElement = node;\n              const { ref } = ionRouterOutlet as any;\n              if (typeof ref === 'function') {\n                ref(node);\n              }\n            },\n          },\n          components\n        )}\n      </StackContext.Provider>\n    );\n  }\n\n  static get contextType() {\n    return RouteManagerContext;\n  }\n}\n\nexport default StackManager;\n\nfunction matchRoute(node: React.ReactNode, routeInfo: RouteInfo) {\n  let matchedNode: React.ReactNode;\n  React.Children.forEach(node as React.ReactElement, (child: React.ReactElement) => {\n    const matchProps = {\n      exact: child.props.exact,\n      path: child.props.path || child.props.from,\n      component: child.props.component,\n    };\n    const match = matchPath(routeInfo.pathname, matchProps);\n    if (match) {\n      matchedNode = child;\n    }\n  });\n\n  if (matchedNode) {\n    return matchedNode;\n  }\n  // If we haven't found a node\n  // try to find one that doesn't have a path or from prop, that will be our not found route\n  React.Children.forEach(node as React.ReactElement, (child: React.ReactElement) => {\n    if (!(child.props.path || child.props.from)) {\n      matchedNode = child;\n    }\n  });\n\n  return matchedNode;\n}\n\nfunction matchComponent(node: React.ReactElement, pathname: string, forceExact?: boolean) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component,\n  };\n  const match = matchPath(pathname, matchProps);\n\n  return match;\n}\n","import type {\n  AnimationBuilder,\n  RouteAction,\n  RouteInfo,\n  RouteManagerContextState,\n  RouterDirection,\n  ViewItem,\n} from '@ionic/react';\nimport { LocationHistory, NavManager, RouteManagerContext, generateId, getConfig } from '@ionic/react';\nimport type { Action as HistoryAction, Location as HistoryLocation } from 'history';\nimport React from 'react';\nimport type { RouteComponentProps } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\n\nimport { IonRouteInner } from './IonRouteInner';\nimport { ReactRouterViewStack } from './ReactRouterViewStack';\nimport StackManager from './StackManager';\n\nexport interface LocationState {\n  direction?: RouterDirection;\n  routerOptions?: { as?: string; unmount?: boolean };\n}\n\ninterface IonRouteProps extends RouteComponentProps<{}, {}, LocationState> {\n  registerHistoryListener: (cb: (location: HistoryLocation<any>, action: HistoryAction) => void) => void;\n}\n\ninterface IonRouteState {\n  routeInfo: RouteInfo;\n}\n\nclass IonRouterInner extends React.PureComponent<IonRouteProps, IonRouteState> {\n  currentTab?: string;\n  exitViewFromOtherOutletHandlers: ((pathname: string) => ViewItem | undefined)[] = [];\n  incomingRouteParams?: Partial<RouteInfo>;\n  locationHistory = new LocationHistory();\n  viewStack = new ReactRouterViewStack();\n  routeMangerContextState: RouteManagerContextState = {\n    canGoBack: () => this.locationHistory.canGoBack(),\n    clearOutlet: this.viewStack.clear,\n    findViewItemByPathname: this.viewStack.findViewItemByPathname,\n    getChildrenToRender: this.viewStack.getChildrenToRender,\n    goBack: () => this.handleNavigateBack(),\n    createViewItem: this.viewStack.createViewItem,\n    findViewItemByRouteInfo: this.viewStack.findViewItemByRouteInfo,\n    findLeavingViewItemByRouteInfo: this.viewStack.findLeavingViewItemByRouteInfo,\n    addViewItem: this.viewStack.add,\n    unMountViewItem: this.viewStack.remove,\n  };\n\n  constructor(props: IonRouteProps) {\n    super(props);\n\n    const routeInfo = {\n      id: generateId('routeInfo'),\n      pathname: this.props.location.pathname,\n      search: this.props.location.search,\n    };\n\n    this.locationHistory.add(routeInfo);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n    this.handleResetTab = this.handleResetTab.bind(this);\n    this.handleNativeBack = this.handleNativeBack.bind(this);\n    this.handleNavigate = this.handleNavigate.bind(this);\n    this.handleNavigateBack = this.handleNavigateBack.bind(this);\n    this.props.registerHistoryListener(this.handleHistoryChange.bind(this));\n    this.handleSetCurrentTab = this.handleSetCurrentTab.bind(this);\n\n    this.state = {\n      routeInfo,\n    };\n  }\n\n  handleChangeTab(tab: string, path?: string, routeOptions?: any) {\n    if (!path) {\n      return;\n    }\n\n    const routeInfo = this.locationHistory.getCurrentRouteInfoForTab(tab);\n    const [pathname, search] = path.split('?');\n    if (routeInfo) {\n      this.incomingRouteParams = { ...routeInfo, routeAction: 'push', routeDirection: 'none' };\n      if (routeInfo.pathname === pathname) {\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(routeInfo.pathname + (routeInfo.search || ''));\n      } else {\n        this.incomingRouteParams.pathname = pathname;\n        this.incomingRouteParams.search = search ? '?' + search : undefined;\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(pathname + (search ? '?' + search : ''));\n      }\n    } else {\n      this.handleNavigate(pathname, 'push', 'none', undefined, routeOptions, tab);\n    }\n  }\n\n  handleHistoryChange(location: HistoryLocation<LocationState>, action: HistoryAction) {\n    let leavingLocationInfo: RouteInfo;\n    if (this.incomingRouteParams) {\n      if (this.incomingRouteParams.routeAction === 'replace') {\n        leavingLocationInfo = this.locationHistory.previous();\n      } else {\n        leavingLocationInfo = this.locationHistory.current();\n      }\n    } else {\n      leavingLocationInfo = this.locationHistory.current();\n    }\n\n    const leavingUrl = leavingLocationInfo.pathname + leavingLocationInfo.search;\n    if (leavingUrl !== location.pathname) {\n      if (!this.incomingRouteParams) {\n        if (action === 'REPLACE') {\n          this.incomingRouteParams = {\n            routeAction: 'replace',\n            routeDirection: 'none',\n            tab: this.currentTab,\n          };\n        }\n        if (action === 'POP') {\n          const currentRoute = this.locationHistory.current();\n          if (currentRoute && currentRoute.pushedByRoute) {\n            const prevInfo = this.locationHistory.findLastLocation(currentRoute);\n            this.incomingRouteParams = { ...prevInfo, routeAction: 'pop', routeDirection: 'back' };\n          } else {\n            this.incomingRouteParams = {\n              routeAction: 'pop',\n              routeDirection: 'none',\n              tab: this.currentTab,\n            };\n          }\n        }\n        if (!this.incomingRouteParams) {\n          this.incomingRouteParams = {\n            routeAction: 'push',\n            routeDirection: location.state?.direction || 'forward',\n            routeOptions: location.state?.routerOptions,\n            tab: this.currentTab,\n          };\n        }\n      }\n\n      let routeInfo: RouteInfo;\n\n      if (this.incomingRouteParams?.id) {\n        routeInfo = {\n          ...(this.incomingRouteParams as RouteInfo),\n          lastPathname: leavingLocationInfo.pathname,\n        };\n        this.locationHistory.add(routeInfo);\n      } else {\n        const isPushed =\n          this.incomingRouteParams.routeAction === 'push' && this.incomingRouteParams.routeDirection === 'forward';\n        routeInfo = {\n          id: generateId('routeInfo'),\n          ...this.incomingRouteParams,\n          lastPathname: leavingLocationInfo.pathname,\n          pathname: location.pathname,\n          search: location.search,\n          params: this.props.match.params,\n          prevRouteLastPathname: leavingLocationInfo.lastPathname,\n        };\n        if (isPushed) {\n          routeInfo.tab = leavingLocationInfo.tab;\n          routeInfo.pushedByRoute = leavingLocationInfo.pathname;\n        } else if (routeInfo.routeAction === 'pop') {\n          const r = this.locationHistory.findLastLocation(routeInfo);\n          routeInfo.pushedByRoute = r?.pushedByRoute;\n        } else if (routeInfo.routeAction === 'push' && routeInfo.tab !== leavingLocationInfo.tab) {\n          // If we are switching tabs grab the last route info for the tab and use its pushedByRoute\n          const lastRoute = this.locationHistory.getCurrentRouteInfoForTab(routeInfo.tab);\n          routeInfo.pushedByRoute = lastRoute?.pushedByRoute;\n        } else if (routeInfo.routeAction === 'replace') {\n          // Make sure to set the lastPathname, etc.. to the current route so the page transitions out\n          const currentRouteInfo = this.locationHistory.current();\n\n          /**\n           * If going from /home to /child, then replacing from\n           * /child to /home, we don't want the route info to\n           * say that /home was pushed by /home which is not correct.\n           */\n          const currentPushedBy = currentRouteInfo?.pushedByRoute;\n          const pushedByRoute =\n            currentPushedBy !== undefined && currentPushedBy !== routeInfo.pathname\n              ? currentPushedBy\n              : routeInfo.pushedByRoute;\n\n          routeInfo.lastPathname = currentRouteInfo?.pathname || routeInfo.lastPathname;\n          routeInfo.prevRouteLastPathname = currentRouteInfo?.lastPathname;\n          routeInfo.pushedByRoute = pushedByRoute;\n          routeInfo.routeDirection = currentRouteInfo?.routeDirection || routeInfo.routeDirection;\n          routeInfo.routeAnimation = currentRouteInfo?.routeAnimation || routeInfo.routeAnimation;\n        }\n\n        this.locationHistory.add(routeInfo);\n      }\n\n      this.setState({\n        routeInfo,\n      });\n    }\n\n    this.incomingRouteParams = undefined;\n  }\n\n  /**\n   * history@4.x uses goBack(), history@5.x uses back()\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just\n   * assume back() is available.\n   */\n  handleNativeBack() {\n    const history = this.props.history as any;\n    const goBack = history.goBack || history.back;\n    goBack();\n  }\n\n  handleNavigate(\n    path: string,\n    routeAction: RouteAction,\n    routeDirection?: RouterDirection,\n    routeAnimation?: AnimationBuilder,\n    routeOptions?: any,\n    tab?: string\n  ) {\n    this.incomingRouteParams = Object.assign(this.incomingRouteParams || {}, {\n      routeAction,\n      routeDirection,\n      routeOptions,\n      routeAnimation,\n      tab,\n    });\n\n    if (routeAction === 'push') {\n      this.props.history.push(path);\n    } else {\n      this.props.history.replace(path);\n    }\n  }\n\n  handleNavigateBack(defaultHref: string | RouteInfo = '/', routeAnimation?: AnimationBuilder) {\n    const config = getConfig();\n    defaultHref = defaultHref ? defaultHref : config && config.get('backButtonDefaultHref' as any);\n    const routeInfo = this.locationHistory.current();\n    if (routeInfo && routeInfo.pushedByRoute) {\n      const prevInfo = this.locationHistory.findLastLocation(routeInfo);\n      if (prevInfo) {\n        this.incomingRouteParams = {\n          ...prevInfo,\n          routeAction: 'pop',\n          routeDirection: 'back',\n          routeAnimation: routeAnimation || routeInfo.routeAnimation,\n        };\n        if (\n          routeInfo.lastPathname === routeInfo.pushedByRoute ||\n          /**\n           * We need to exclude tab switches/tab\n           * context changes here because tabbed\n           * navigation is not linear, but router.back()\n           * will go back in a linear fashion.\n           */\n          (prevInfo.pathname === routeInfo.pushedByRoute && routeInfo.tab === '' && prevInfo.tab === '')\n        ) {\n          /**\n           * history@4.x uses goBack(), history@5.x uses back()\n           * TODO: If support for React Router <=5 is dropped\n           * this logic is no longer needed. We can just\n           * assume back() is available.\n           */\n          const history = this.props.history as any;\n          const goBack = history.goBack || history.back;\n          goBack();\n        } else {\n          this.handleNavigate(prevInfo.pathname + (prevInfo.search || ''), 'pop', 'back');\n        }\n      } else {\n        this.handleNavigate(defaultHref as string, 'pop', 'back');\n      }\n    } else {\n      this.handleNavigate(defaultHref as string, 'pop', 'back');\n    }\n  }\n\n  handleResetTab(tab: string, originalHref: string, originalRouteOptions: any) {\n    const routeInfo = this.locationHistory.getFirstRouteInfoForTab(tab);\n    if (routeInfo) {\n      const newRouteInfo = { ...routeInfo };\n      newRouteInfo.pathname = originalHref;\n      newRouteInfo.routeOptions = originalRouteOptions;\n      this.incomingRouteParams = { ...newRouteInfo, routeAction: 'pop', routeDirection: 'back' };\n      this.props.history.push(newRouteInfo.pathname + (newRouteInfo.search || ''));\n    }\n  }\n\n  handleSetCurrentTab(tab: string) {\n    this.currentTab = tab;\n    const ri = { ...this.locationHistory.current() };\n    if (ri.tab !== tab) {\n      ri.tab = tab;\n      this.locationHistory.update(ri);\n    }\n  }\n\n  render() {\n    return (\n      <RouteManagerContext.Provider value={this.routeMangerContextState}>\n        <NavManager\n          ionRoute={IonRouteInner}\n          ionRedirect={{}}\n          stackManager={StackManager}\n          routeInfo={this.state.routeInfo!}\n          onNativeBack={this.handleNativeBack}\n          onNavigateBack={this.handleNavigateBack}\n          onNavigate={this.handleNavigate}\n          onSetCurrentTab={this.handleSetCurrentTab}\n          onChangeTab={this.handleChangeTab}\n          onResetTab={this.handleResetTab}\n          locationHistory={this.locationHistory}\n        >\n          {this.props.children}\n        </NavManager>\n      </RouteManagerContext.Provider>\n    );\n  }\n}\n\nexport const IonRouter = withRouter(IonRouterInner);\nIonRouter.displayName = 'IonRouter';\n","import type { Action as HistoryAction, History, Location as HistoryLocation } from 'history';\nimport { createBrowserHistory as createHistory } from 'history';\nimport React from 'react';\nimport type { BrowserRouterProps } from 'react-router-dom';\nimport { Router } from 'react-router-dom';\n\nimport { IonRouter } from './IonRouter';\n\ninterface IonReactRouterProps extends BrowserRouterProps {\n  history?: History;\n}\n\nexport class IonReactRouter extends React.Component<IonReactRouterProps> {\n  historyListenHandler?: (location: HistoryLocation, action: HistoryAction) => void;\n  history: History;\n\n  constructor(props: IonReactRouterProps) {\n    super(props);\n    const { history, ...rest } = props;\n    this.history = history || createHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location: HistoryLocation, action: HistoryAction) {\n    const locationValue = (location as any).location || location;\n    const actionValue = (location as any).action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n\n  registerHistoryListener(cb: (location: HistoryLocation, action: HistoryAction) => void) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <Router history={this.history} {...props}>\n        <IonRouter registerHistoryListener={this.registerHistoryListener}>{children}</IonRouter>\n      </Router>\n    );\n  }\n}\n","import type { Action as HistoryAction, Location as HistoryLocation, MemoryHistory } from 'history';\nimport React from 'react';\nimport type { MemoryRouterProps } from 'react-router';\nimport { Router } from 'react-router';\n\nimport { IonRouter } from './IonRouter';\n\ninterface IonReactMemoryRouterProps extends MemoryRouterProps {\n  history: MemoryHistory;\n}\n\nexport class IonReactMemoryRouter extends React.Component<IonReactMemoryRouterProps> {\n  history: MemoryHistory;\n  historyListenHandler?: (location: HistoryLocation, action: HistoryAction) => void;\n\n  constructor(props: IonReactMemoryRouterProps) {\n    super(props);\n    this.history = props.history;\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location: HistoryLocation, action: HistoryAction) {\n    const locationValue = (location as any).location || location;\n    const actionValue = (location as any).action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n\n  registerHistoryListener(cb: (location: HistoryLocation, action: HistoryAction) => void) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <Router {...props}>\n        <IonRouter registerHistoryListener={this.registerHistoryListener}>{children}</IonRouter>\n      </Router>\n    );\n  }\n}\n","import type { Action as HistoryAction, History, Location as HistoryLocation } from 'history';\nimport { createHashHistory as createHistory } from 'history';\nimport React from 'react';\nimport type { BrowserRouterProps } from 'react-router-dom';\nimport { Router } from 'react-router-dom';\n\nimport { IonRouter } from './IonRouter';\n\ninterface IonReactHashRouterProps extends BrowserRouterProps {\n  history?: History;\n}\n\nexport class IonReactHashRouter extends React.Component<IonReactHashRouterProps> {\n  history: History;\n  historyListenHandler?: (location: HistoryLocation, action: HistoryAction) => void;\n\n  constructor(props: IonReactHashRouterProps) {\n    super(props);\n    const { history, ...rest } = props;\n    this.history = history || createHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location: HistoryLocation, action: HistoryAction) {\n    const locationValue = (location as any).location || location;\n    const actionValue = (location as any).action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n\n  registerHistoryListener(cb: (location: HistoryLocation, action: HistoryAction) => void) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <Router history={this.history} {...props}>\n        <IonRouter registerHistoryListener={this.registerHistoryListener}>{children}</IonRouter>\n      </Router>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}