{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent } from '@stencil/core/internal/client';\nimport { c as componentOnReady, o as debounce } from './helpers.js';\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n/** Join the non empty segments with \"/\". */\nconst generatePath = segments => {\n  const path = segments.filter(s => s.length > 0).join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nconst writeSegments = (history, root, useHash, segments, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...segments], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  } else {\n    history.replaceState(state, '', url);\n  }\n};\n/**\n * Transforms a chain to a list of segments.\n *\n * Notes:\n * - parameter segments of the form :param are replaced with their value,\n * - null is returned when a value is missing for any parameter segment.\n */\nconst chainToSegments = chain => {\n  const segments = [];\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        segments.push(param);\n      } else if (segment !== '') {\n        segments.push(segment);\n      }\n    }\n  }\n  return segments;\n};\n/**\n * Removes the prefix segments from the path segments.\n *\n * Return:\n * - null when the path segments do not start with the passed prefix,\n * - the path segments after the prefix otherwise.\n */\nconst removePrefix = (prefix, segments) => {\n  if (prefix.length > segments.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return segments;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== segments[i]) {\n      return null;\n    }\n  }\n  if (segments.length === prefix.length) {\n    return [''];\n  }\n  return segments.slice(prefix.length);\n};\nconst readSegments = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const segments = parsePath(pathname).segments;\n  return removePrefix(prefix, segments);\n};\n/**\n * Parses the path to:\n * - segments an array of '/' separated parts,\n * - queryString (undefined when no query string).\n */\nconst parsePath = path => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substring(qsStart + 1);\n      path = path.substring(0, qsStart);\n    }\n    segments = path.split('/').map(s => s.trim()).filter(s => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return {\n    segments,\n    queryString\n  };\n};\nconst printRoutes = routes => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const segments = [];\n    chain.forEach(r => segments.push(...r.segments));\n    const ids = chain.map(r => r.id);\n    console.debug(`%c ${generatePath(segments)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = redirects => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n\n/**\n * Activates the passed route chain.\n *\n * There must be exactly one outlet per route entry in the chain.\n *\n * The methods calls setRouteId on each of the outlet with the corresponding route entry in the chain.\n * setRouteId will create or select the view in the outlet.\n */\nconst writeNavState = async function (root, chain, direction, index) {\n  let changed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  let animation = arguments.length > 5 ? arguments[5] : undefined;\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise(resolve => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n};\n/**\n * Recursively walks the outlet in the DOM.\n *\n * The function returns a list of RouteID corresponding to each of the outlet and the last outlet without a RouteID.\n */\nconst readNavState = async root => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // eslint-disable-next-line no-cond-assign\n  while (outlet = searchNavNode(node)) {\n    const id = await outlet.getRouteId();\n    if (id) {\n      node = id.element;\n      id.element = undefined;\n      ids.push(id);\n    } else {\n      break;\n    }\n  }\n  return {\n    ids,\n    outlet\n  };\n};\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise(resolve => {\n    window.addEventListener('ionNavWillLoad', () => resolve(), {\n      once: true\n    });\n  });\n};\n/** Selector for all the outlets supported by the router. */\nconst OUTLET_SELECTOR = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = root => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(OUTLET_SELECTOR)) {\n    return root;\n  }\n  const outlet = root.querySelector(OUTLET_SELECTOR);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n/**\n * Returns whether the given redirect matches the given path segments.\n *\n * A redirect matches when the segments of the path and redirect.from are equal.\n * Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n * The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\n */\nconst matchesRedirect = (segments, redirect) => {\n  const {\n    from,\n    to\n  } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > segments.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== segments[i]) {\n      return false;\n    }\n  }\n  return from.length === segments.length;\n};\n/** Returns the first redirect matching the path segments or undefined when no match found. */\nconst findRouteRedirect = (segments, redirects) => {\n  return redirects.find(redirect => matchesRedirect(segments, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let score = 0;\n  for (let i = 0; i < len; i++) {\n    const routeId = ids[i];\n    const routeChain = chain[i];\n    // Skip results where the route id does not match the chain at the same index\n    if (routeId.id.toLowerCase() !== routeChain.id) {\n      break;\n    }\n    if (routeId.params) {\n      const routeIdParams = Object.keys(routeId.params);\n      // Only compare routes with the chain that have the same number of parameters.\n      if (routeIdParams.length === routeChain.segments.length) {\n        // Maps the route's params into a path based on the path variable names,\n        // to compare against the route chain format.\n        //\n        // Before:\n        // ```ts\n        // {\n        //  params: {\n        //    s1: 'a',\n        //    s2: 'b'\n        //  }\n        // }\n        // ```\n        //\n        // After:\n        // ```ts\n        // [':s1',':s2']\n        // ```\n        //\n        const pathWithParams = routeIdParams.map(key => `:${key}`);\n        for (let j = 0; j < pathWithParams.length; j++) {\n          // Skip results where the path variable is not a match\n          if (pathWithParams[j].toLowerCase() !== routeChain.segments[j]) {\n            break;\n          }\n          // Weight path matches for the same index higher.\n          score++;\n        }\n      }\n    }\n    // Weight id matches\n    score++;\n  }\n  return score;\n};\n/**\n * Matches the segments against the chain.\n *\n * Returns:\n * - null when there is no match,\n * - a chain with the params properties updated with the parameter segments on match.\n */\nconst matchesSegments = (segments, chain) => {\n  const inputSegments = new RouterSegments(segments);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const chainSegments = chain[i].segments;\n    if (chainSegments[0] === '') {\n      matchesDefault = true;\n    } else {\n      for (const segment of chainSegments) {\n        const data = inputSegments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        } else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = matchesDefault ? matchesDefault === (inputSegments.next() === '') : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      segments: route.segments,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave\n    }));\n  }\n  return chain;\n};\n/**\n * Merges the route parameter objects.\n * Returns undefined when both parameters are undefined.\n */\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\n/**\n * Finds the best match for the ids in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the RouteIDs.\n * That is they contain both the componentProps of the <ion-route> and the parameter segment.\n */\nconst findChainForIDs = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  for (const chain of chains) {\n    const score = matchesIDs(ids, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => {\n      var _a;\n      return {\n        id: route.id,\n        segments: route.segments,\n        params: mergeParams(route.params, (_a = ids[i]) === null || _a === void 0 ? void 0 : _a.params)\n      };\n    });\n  }\n  return null;\n};\n/**\n * Finds the best match for the segments in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the segments.\n * That is they contain both the componentProps of the <ion-route> and the parameter segments.\n */\nconst findChainForSegments = (segments, chains) => {\n  let match = null;\n  let bestScore = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesSegments(segments, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > bestScore) {\n        bestScore = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\n/**\n * Computes the priority of a chain.\n *\n * Parameter segments are given a lower priority over fixed segments.\n *\n * Considering the following 2 chains matching the path /path/to/page:\n * - /path/to/:where\n * - /path/to/page\n *\n * The second one will be given a higher priority because \"page\" is a fixed segment (vs \":where\", a parameter segment).\n */\nconst computePriority = chain => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        score += Math.pow(1, level);\n      } else if (segment !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(segments) {\n    this.segments = segments.slice();\n  }\n  next() {\n    if (this.segments.length > 0) {\n      return this.segments.shift();\n    }\n    return '';\n  }\n}\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\n/**\n * Extracts the redirects (that is <ion-route-redirect> elements inside the root).\n *\n * The redirects are returned as a list of RouteRedirect.\n */\nconst readRedirects = root => {\n  return Array.from(root.children).filter(el => el.tagName === 'ION-ROUTE-REDIRECT').map(el => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to)\n    };\n  });\n};\n/**\n * Extracts all the routes (that is <ion-route> elements inside the root).\n *\n * The routes are returned as a list of chains - the flattened tree.\n */\nconst readRoutes = root => {\n  return flattenRouterTree(readRouteNodes(root));\n};\n/**\n * Reads the route nodes as a tree modeled after the DOM tree of <ion-route> elements.\n *\n * Note: routes without a component are ignored together with their children.\n */\nconst readRouteNodes = node => {\n  return Array.from(node.children).filter(el => el.tagName === 'ION-ROUTE' && el.component).map(el => {\n    const component = readProp(el, 'component');\n    return {\n      segments: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el)\n    };\n  });\n};\n/**\n * Flattens a RouterTree in a list of chains.\n *\n * Each chain represents a path from the root node to a terminal node.\n */\nconst flattenRouterTree = nodes => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\n/** Flattens a route node recursively and push each branch to the chains list. */\nconst flattenNode = (chain, chains, node) => {\n  chain = [...chain, {\n    id: node.id,\n    segments: node.segments,\n    params: node.params,\n    beforeLeave: node.beforeLeave,\n    beforeEnter: node.beforeEnter\n  }];\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\nconst Router = /*@__PURE__*/proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\n     * an alternate prefix for all URL paths.\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getSegments());\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const {\n          redirect\n        } = canProceed;\n        const path = parsePath(redirect);\n        this.setSegments(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    } else {\n      await this.onRoutesChanged();\n    }\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getSegments();\n    const canProceed = await this.runGuards(segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      } else {\n        return false;\n      }\n    }\n    return this.writeNavStateRoot(segments, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, processNextHandler => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified path.\n   *\n   * @param path The path to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(path) {\n    let direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'forward';\n    let animation = arguments.length > 2 ? arguments[2] : undefined;\n    var _a;\n    if (path.startsWith('.')) {\n      const currentPath = (_a = this.previousPath) !== null && _a !== void 0 ? _a : '/';\n      // Convert currentPath to an URL by pre-pending a protocol and a host to resolve the relative path.\n      const url = new URL(path, `https://host/${currentPath}`);\n      path = url.pathname + url.search;\n    }\n    let parsedPath = parsePath(path);\n    const canProceed = await this.runGuards(parsedPath.segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      } else {\n        return false;\n      }\n    }\n    this.setSegments(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /** Go back to previous page in the window.history. */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const {\n      ids,\n      outlet\n    } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = findChainForIDs(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n      return false;\n    }\n    const segments = chainToSegments(chain);\n    if (!segments) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    this.setSegments(segments, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, segments, null, ids.length);\n    return true;\n  }\n  /** This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes. */\n  onRedirectChanged() {\n    const segments = this.getSegments();\n    if (segments && findRouteRedirect(segments, readRedirects(this.el))) {\n      this.writeNavStateRoot(segments, ROUTER_INTENT_NONE);\n    }\n  }\n  /** This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes. */\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getSegments(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || state >= lastState && lastState > 0) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  async writeNavStateRoot(segments, direction, animation) {\n    if (!segments) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(segments, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      const {\n        segments: toSegments,\n        queryString\n      } = redirect.to;\n      this.setSegments(toSegments, direction, queryString);\n      redirectFrom = redirect.from;\n      segments = toSegments;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = findChainForSegments(segments, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, segments, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, segments, redirectFrom) {\n    let index = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let animation = arguments.length > 6 ? arguments[6] : undefined;\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, segments, redirectFrom, index, animation);\n    } catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise(r => resolve = r);\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  /**\n   * Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n   *\n   * When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n   * Otherwise the beforeEnterHook hook of the target route is executed.\n   */\n  async runGuards() {\n    let to = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSegments();\n    let from = arguments.length > 1 ? arguments[1] : undefined;\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const fromChain = findChainForSegments(from, routes);\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const toChain = findChainForSegments(to, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n  async writeNavState(node, chain, direction, segments, redirectFrom) {\n    let index = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let animation = arguments.length > 6 ? arguments[6] : undefined;\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(segments, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setSegments(segments, direction, queryString) {\n    this.state++;\n    writeSegments(window.history, this.root, this.useHash, segments, direction, this.state, queryString);\n  }\n  getSegments() {\n    return readSegments(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(toSegments, redirectFromSegments) {\n    const from = this.previousPath;\n    const to = generatePath(toSegments);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromSegments ? generatePath(redirectFromSegments) : null;\n    return {\n      from,\n      redirectedFrom,\n      to\n    };\n  }\n  get el() {\n    return this;\n  }\n}, [0, \"ion-router\", {\n  \"root\": [1],\n  \"useHash\": [4, \"use-hash\"],\n  \"canTransition\": [64],\n  \"push\": [64],\n  \"back\": [64],\n  \"printDebug\": [64],\n  \"navChanged\": [64]\n}, [[8, \"popstate\", \"onPopState\"], [4, \"ionBackButton\", \"onBackButton\"]]]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-router\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-router\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Router);\n        }\n        break;\n    }\n  });\n}\nconst IonRouter = Router;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonRouter, defineCustomElement };","map":{"version":3,"names":["proxyCustomElement","HTMLElement","createEvent","c","componentOnReady","o","debounce","ROUTER_INTENT_NONE","ROUTER_INTENT_FORWARD","ROUTER_INTENT_BACK","generatePath","segments","path","filter","s","length","join","generateUrl","useHash","queryString","url","undefined","writeSegments","history","root","direction","state","parsePath","pushState","replaceState","chainToSegments","chain","route","segment","param","params","slice","push","removePrefix","prefix","i","readSegments","loc","pathname","hash","qsStart","indexOf","substring","split","map","trim","printRoutes","routes","console","group","forEach","r","ids","id","debug","groupEnd","printRedirects","redirects","redirect","to","from","writeNavState","index","changed","arguments","animation","outlet","searchNavNode","Promise","resolve","result","setRouteId","element","markVisible","e","error","readNavState","node","getRouteId","waitUntilNavNode","document","body","window","addEventListener","once","OUTLET_SELECTOR","matches","querySelector","matchesRedirect","expected","findRouteRedirect","find","matchesIDs","len","Math","min","score","routeId","routeChain","toLowerCase","routeIdParams","Object","keys","pathWithParams","key","j","matchesSegments","inputSegments","RouterSegments","matchesDefault","allparams","chainSegments","data","next","mergeParams","beforeEnter","beforeLeave","a","b","assign","findChainForIDs","chains","match","maxMatches","_a","findChainForSegments","bestScore","matchedChain","computePriority","level","pow","constructor","shift","readProp","el","prop","hasAttribute","getAttribute","readRedirects","Array","children","tagName","readRoutes","flattenRouterTree","readRouteNodes","component","componentProps","nodes","flattenNode","child","Router","__registerHost","ionRouteWillChange","ionRouteDidChange","previousPath","busy","lastState","componentWillLoad","canProceed","runGuards","getSegments","setSegments","writeNavStateRoot","onRoutesChanged","componentDidLoad","onRedirectChanged","bind","onPopState","historyDirection","onBackButton","ev","detail","register","processNextHandler","back","canTransition","startsWith","currentPath","URL","search","parsedPath","waitPromise","printDebug","navChanged","warn","safeWriteNavState","win","title","location","href","redirectFrom","toSegments","unlock","lock","p","fromChain","beforeLeaveHook","canLeave","toChain","beforeEnterHook","routeEvent","routeChangeEvent","emit","redirectFromSegments","redirectedFrom","defineCustomElement$1","customElements","components","get","define","IonRouter","defineCustomElement"],"sources":["/Users/aliciamedina/Library/Mobile Documents/com~apple~CloudDocs/Work/Proyecto Fin Grado/Electron/Ionic/Chatty-iOS/node_modules/@ionic/core/components/ion-router.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent } from '@stencil/core/internal/client';\nimport { c as componentOnReady, o as debounce } from './helpers.js';\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n/** Join the non empty segments with \"/\". */\nconst generatePath = (segments) => {\n  const path = segments.filter((s) => s.length > 0).join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nconst writeSegments = (history, root, useHash, segments, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...segments], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  }\n  else {\n    history.replaceState(state, '', url);\n  }\n};\n/**\n * Transforms a chain to a list of segments.\n *\n * Notes:\n * - parameter segments of the form :param are replaced with their value,\n * - null is returned when a value is missing for any parameter segment.\n */\nconst chainToSegments = (chain) => {\n  const segments = [];\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        segments.push(param);\n      }\n      else if (segment !== '') {\n        segments.push(segment);\n      }\n    }\n  }\n  return segments;\n};\n/**\n * Removes the prefix segments from the path segments.\n *\n * Return:\n * - null when the path segments do not start with the passed prefix,\n * - the path segments after the prefix otherwise.\n */\nconst removePrefix = (prefix, segments) => {\n  if (prefix.length > segments.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return segments;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== segments[i]) {\n      return null;\n    }\n  }\n  if (segments.length === prefix.length) {\n    return [''];\n  }\n  return segments.slice(prefix.length);\n};\nconst readSegments = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const segments = parsePath(pathname).segments;\n  return removePrefix(prefix, segments);\n};\n/**\n * Parses the path to:\n * - segments an array of '/' separated parts,\n * - queryString (undefined when no query string).\n */\nconst parsePath = (path) => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substring(qsStart + 1);\n      path = path.substring(0, qsStart);\n    }\n    segments = path\n      .split('/')\n      .map((s) => s.trim())\n      .filter((s) => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return { segments, queryString };\n};\n\nconst printRoutes = (routes) => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const segments = [];\n    chain.forEach((r) => segments.push(...r.segments));\n    const ids = chain.map((r) => r.id);\n    console.debug(`%c ${generatePath(segments)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n\n/**\n * Activates the passed route chain.\n *\n * There must be exactly one outlet per route entry in the chain.\n *\n * The methods calls setRouteId on each of the outlet with the corresponding route entry in the chain.\n * setRouteId will create or select the view in the outlet.\n */\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise((resolve) => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  }\n  catch (e) {\n    console.error(e);\n    return false;\n  }\n};\n/**\n * Recursively walks the outlet in the DOM.\n *\n * The function returns a list of RouteID corresponding to each of the outlet and the last outlet without a RouteID.\n */\nconst readNavState = async (root) => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // eslint-disable-next-line no-cond-assign\n  while ((outlet = searchNavNode(node))) {\n    const id = await outlet.getRouteId();\n    if (id) {\n      node = id.element;\n      id.element = undefined;\n      ids.push(id);\n    }\n    else {\n      break;\n    }\n  }\n  return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise((resolve) => {\n    window.addEventListener('ionNavWillLoad', () => resolve(), { once: true });\n  });\n};\n/** Selector for all the outlets supported by the router. */\nconst OUTLET_SELECTOR = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(OUTLET_SELECTOR)) {\n    return root;\n  }\n  const outlet = root.querySelector(OUTLET_SELECTOR);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n/**\n * Returns whether the given redirect matches the given path segments.\n *\n * A redirect matches when the segments of the path and redirect.from are equal.\n * Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n * The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\n */\nconst matchesRedirect = (segments, redirect) => {\n  const { from, to } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > segments.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== segments[i]) {\n      return false;\n    }\n  }\n  return from.length === segments.length;\n};\n/** Returns the first redirect matching the path segments or undefined when no match found. */\nconst findRouteRedirect = (segments, redirects) => {\n  return redirects.find((redirect) => matchesRedirect(segments, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let score = 0;\n  for (let i = 0; i < len; i++) {\n    const routeId = ids[i];\n    const routeChain = chain[i];\n    // Skip results where the route id does not match the chain at the same index\n    if (routeId.id.toLowerCase() !== routeChain.id) {\n      break;\n    }\n    if (routeId.params) {\n      const routeIdParams = Object.keys(routeId.params);\n      // Only compare routes with the chain that have the same number of parameters.\n      if (routeIdParams.length === routeChain.segments.length) {\n        // Maps the route's params into a path based on the path variable names,\n        // to compare against the route chain format.\n        //\n        // Before:\n        // ```ts\n        // {\n        //  params: {\n        //    s1: 'a',\n        //    s2: 'b'\n        //  }\n        // }\n        // ```\n        //\n        // After:\n        // ```ts\n        // [':s1',':s2']\n        // ```\n        //\n        const pathWithParams = routeIdParams.map((key) => `:${key}`);\n        for (let j = 0; j < pathWithParams.length; j++) {\n          // Skip results where the path variable is not a match\n          if (pathWithParams[j].toLowerCase() !== routeChain.segments[j]) {\n            break;\n          }\n          // Weight path matches for the same index higher.\n          score++;\n        }\n      }\n    }\n    // Weight id matches\n    score++;\n  }\n  return score;\n};\n/**\n * Matches the segments against the chain.\n *\n * Returns:\n * - null when there is no match,\n * - a chain with the params properties updated with the parameter segments on match.\n */\nconst matchesSegments = (segments, chain) => {\n  const inputSegments = new RouterSegments(segments);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const chainSegments = chain[i].segments;\n    if (chainSegments[0] === '') {\n      matchesDefault = true;\n    }\n    else {\n      for (const segment of chainSegments) {\n        const data = inputSegments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        }\n        else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = matchesDefault ? matchesDefault === (inputSegments.next() === '') : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      segments: route.segments,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave,\n    }));\n  }\n  return chain;\n};\n/**\n * Merges the route parameter objects.\n * Returns undefined when both parameters are undefined.\n */\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\n/**\n * Finds the best match for the ids in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the RouteIDs.\n * That is they contain both the componentProps of the <ion-route> and the parameter segment.\n */\nconst findChainForIDs = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  for (const chain of chains) {\n    const score = matchesIDs(ids, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => {\n      var _a;\n      return ({\n        id: route.id,\n        segments: route.segments,\n        params: mergeParams(route.params, (_a = ids[i]) === null || _a === void 0 ? void 0 : _a.params),\n      });\n    });\n  }\n  return null;\n};\n/**\n * Finds the best match for the segments in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the segments.\n * That is they contain both the componentProps of the <ion-route> and the parameter segments.\n */\nconst findChainForSegments = (segments, chains) => {\n  let match = null;\n  let bestScore = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesSegments(segments, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > bestScore) {\n        bestScore = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\n/**\n * Computes the priority of a chain.\n *\n * Parameter segments are given a lower priority over fixed segments.\n *\n * Considering the following 2 chains matching the path /path/to/page:\n * - /path/to/:where\n * - /path/to/page\n *\n * The second one will be given a higher priority because \"page\" is a fixed segment (vs \":where\", a parameter segment).\n */\nconst computePriority = (chain) => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        score += Math.pow(1, level);\n      }\n      else if (segment !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(segments) {\n    this.segments = segments.slice();\n  }\n  next() {\n    if (this.segments.length > 0) {\n      return this.segments.shift();\n    }\n    return '';\n  }\n}\n\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\n/**\n * Extracts the redirects (that is <ion-route-redirect> elements inside the root).\n *\n * The redirects are returned as a list of RouteRedirect.\n */\nconst readRedirects = (root) => {\n  return Array.from(root.children)\n    .filter((el) => el.tagName === 'ION-ROUTE-REDIRECT')\n    .map((el) => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to),\n    };\n  });\n};\n/**\n * Extracts all the routes (that is <ion-route> elements inside the root).\n *\n * The routes are returned as a list of chains - the flattened tree.\n */\nconst readRoutes = (root) => {\n  return flattenRouterTree(readRouteNodes(root));\n};\n/**\n * Reads the route nodes as a tree modeled after the DOM tree of <ion-route> elements.\n *\n * Note: routes without a component are ignored together with their children.\n */\nconst readRouteNodes = (node) => {\n  return Array.from(node.children)\n    .filter((el) => el.tagName === 'ION-ROUTE' && el.component)\n    .map((el) => {\n    const component = readProp(el, 'component');\n    return {\n      segments: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el),\n    };\n  });\n};\n/**\n * Flattens a RouterTree in a list of chains.\n *\n * Each chain represents a path from the root node to a terminal node.\n */\nconst flattenRouterTree = (nodes) => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\n/** Flattens a route node recursively and push each branch to the chains list. */\nconst flattenNode = (chain, chains, node) => {\n  chain = [\n    ...chain,\n    {\n      id: node.id,\n      segments: node.segments,\n      params: node.params,\n      beforeLeave: node.beforeLeave,\n      beforeEnter: node.beforeEnter,\n    },\n  ];\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\n\nconst Router = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\n     * an alternate prefix for all URL paths.\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getSegments());\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const { redirect } = canProceed;\n        const path = parsePath(redirect);\n        this.setSegments(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    }\n    else {\n      await this.onRoutesChanged();\n    }\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getSegments();\n    const canProceed = await this.runGuards(segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      }\n      else {\n        return false;\n      }\n    }\n    return this.writeNavStateRoot(segments, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, (processNextHandler) => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified path.\n   *\n   * @param path The path to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(path, direction = 'forward', animation) {\n    var _a;\n    if (path.startsWith('.')) {\n      const currentPath = (_a = this.previousPath) !== null && _a !== void 0 ? _a : '/';\n      // Convert currentPath to an URL by pre-pending a protocol and a host to resolve the relative path.\n      const url = new URL(path, `https://host/${currentPath}`);\n      path = url.pathname + url.search;\n    }\n    let parsedPath = parsePath(path);\n    const canProceed = await this.runGuards(parsedPath.segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      }\n      else {\n        return false;\n      }\n    }\n    this.setSegments(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /** Go back to previous page in the window.history. */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const { ids, outlet } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = findChainForIDs(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map((i) => i.id));\n      return false;\n    }\n    const segments = chainToSegments(chain);\n    if (!segments) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    this.setSegments(segments, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, segments, null, ids.length);\n    return true;\n  }\n  /** This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes. */\n  onRedirectChanged() {\n    const segments = this.getSegments();\n    if (segments && findRouteRedirect(segments, readRedirects(this.el))) {\n      this.writeNavStateRoot(segments, ROUTER_INTENT_NONE);\n    }\n  }\n  /** This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes. */\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getSegments(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || (state >= lastState && lastState > 0)) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  async writeNavStateRoot(segments, direction, animation) {\n    if (!segments) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(segments, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      const { segments: toSegments, queryString } = redirect.to;\n      this.setSegments(toSegments, direction, queryString);\n      redirectFrom = redirect.from;\n      segments = toSegments;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = findChainForSegments(segments, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, segments, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, segments, redirectFrom, index, animation);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise((r) => (resolve = r));\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  /**\n   * Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n   *\n   * When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n   * Otherwise the beforeEnterHook hook of the target route is executed.\n   */\n  async runGuards(to = this.getSegments(), from) {\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const fromChain = findChainForSegments(from, routes);\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const toChain = findChainForSegments(to, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n  async writeNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(segments, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setSegments(segments, direction, queryString) {\n    this.state++;\n    writeSegments(window.history, this.root, this.useHash, segments, direction, this.state, queryString);\n  }\n  getSegments() {\n    return readSegments(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(toSegments, redirectFromSegments) {\n    const from = this.previousPath;\n    const to = generatePath(toSegments);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromSegments ? generatePath(redirectFromSegments) : null;\n    return {\n      from,\n      redirectedFrom,\n      to,\n    };\n  }\n  get el() { return this; }\n}, [0, \"ion-router\", {\n    \"root\": [1],\n    \"useHash\": [4, \"use-hash\"],\n    \"canTransition\": [64],\n    \"push\": [64],\n    \"back\": [64],\n    \"printDebug\": [64],\n    \"navChanged\": [64]\n  }, [[8, \"popstate\", \"onPopState\"], [4, \"ionBackButton\", \"onBackButton\"]]]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-router\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-router\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Router);\n      }\n      break;\n  } });\n}\n\nconst IonRouter = Router;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonRouter, defineCustomElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}