{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from './WorkboxError.js';\nimport { logger } from './logger.js';\nimport { assert } from './assert.js';\nimport { getFriendlyURL } from '../_private/getFriendlyURL.js';\nimport { pluginUtils } from '../utils/pluginUtils.js';\nimport '../_version.js';\n/**\n * Wrapper around the fetch API.\n *\n * Will call requestWillFetch on available plugins.\n *\n * @param {Object} options\n * @param {Request|string} options.request\n * @param {Object} [options.fetchOptions]\n * @param {ExtendableEvent} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Response>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst wrappedFetch = async _ref => {\n  let {\n    request,\n    fetchOptions,\n    event,\n    plugins = []\n  } = _ref;\n  if (typeof request === 'string') {\n    request = new Request(request);\n  }\n  // We *should* be able to call `await event.preloadResponse` even if it's\n  // undefined, but for some reason, doing so leads to errors in our Node unit\n  // tests. To work around that, explicitly check preloadResponse's value first.\n  if (event instanceof FetchEvent && event.preloadResponse) {\n    const possiblePreloadResponse = await event.preloadResponse;\n    if (possiblePreloadResponse) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.log(`Using a preloaded navigation response for ` + `'${getFriendlyURL(request.url)}'`);\n      }\n      return possiblePreloadResponse;\n    }\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    assert.isInstance(request, Request, {\n      paramName: 'request',\n      expectedClass: Request,\n      moduleName: 'workbox-core',\n      className: 'fetchWrapper',\n      funcName: 'wrappedFetch'\n    });\n  }\n  const failedFetchPlugins = pluginUtils.filter(plugins, \"fetchDidFail\" /* FETCH_DID_FAIL */);\n  // If there is a fetchDidFail plugin, we need to save a clone of the\n  // original request before it's either modified by a requestWillFetch\n  // plugin or before the original request's body is consumed via fetch().\n  const originalRequest = failedFetchPlugins.length > 0 ? request.clone() : null;\n  try {\n    for (const plugin of plugins) {\n      if (\"requestWillFetch\" /* REQUEST_WILL_FETCH */ in plugin) {\n        const pluginMethod = plugin[\"requestWillFetch\" /* REQUEST_WILL_FETCH */];\n        const requestClone = request.clone();\n        request = await pluginMethod.call(plugin, {\n          request: requestClone,\n          event\n        });\n        if (process.env.NODE_ENV !== 'production') {\n          if (request) {\n            assert.isInstance(request, Request, {\n              moduleName: 'Plugin',\n              funcName: \"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */,\n              isReturnValueProblem: true\n            });\n          }\n        }\n      }\n    }\n  } catch (err) {\n    throw new WorkboxError('plugin-error-request-will-fetch', {\n      thrownError: err\n    });\n  }\n  // The request can be altered by plugins with `requestWillFetch` making\n  // the original request (Most likely from a `fetch` event) to be different\n  // to the Request we make. Pass both to `fetchDidFail` to aid debugging.\n  const pluginFilteredRequest = request.clone();\n  try {\n    let fetchResponse;\n    // See https://github.com/GoogleChrome/workbox/issues/1796\n    if (request.mode === 'navigate') {\n      fetchResponse = await fetch(request);\n    } else {\n      fetchResponse = await fetch(request, fetchOptions);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      logger.debug(`Network request for ` + `'${getFriendlyURL(request.url)}' returned a response with ` + `status '${fetchResponse.status}'.`);\n    }\n    for (const plugin of plugins) {\n      if (\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */ in plugin) {\n        fetchResponse = await plugin[\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */].call(plugin, {\n          event,\n          request: pluginFilteredRequest,\n          response: fetchResponse\n        });\n        if (process.env.NODE_ENV !== 'production') {\n          if (fetchResponse) {\n            assert.isInstance(fetchResponse, Response, {\n              moduleName: 'Plugin',\n              funcName: \"fetchDidSucceed\" /* FETCH_DID_SUCCEED */,\n              isReturnValueProblem: true\n            });\n          }\n        }\n      }\n    }\n    return fetchResponse;\n  } catch (error) {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.error(`Network request for ` + `'${getFriendlyURL(request.url)}' threw an error.`, error);\n    }\n    for (const plugin of failedFetchPlugins) {\n      await plugin[\"fetchDidFail\" /* FETCH_DID_FAIL */].call(plugin, {\n        error,\n        event,\n        originalRequest: originalRequest.clone(),\n        request: pluginFilteredRequest.clone()\n      });\n    }\n    throw error;\n  }\n};\nconst fetchWrapper = {\n  fetch: wrappedFetch\n};\nexport { fetchWrapper };","map":{"version":3,"names":["WorkboxError","logger","assert","getFriendlyURL","pluginUtils","wrappedFetch","_ref","request","fetchOptions","event","plugins","Request","FetchEvent","preloadResponse","possiblePreloadResponse","process","env","NODE_ENV","log","url","isInstance","paramName","expectedClass","moduleName","className","funcName","failedFetchPlugins","filter","originalRequest","length","clone","plugin","pluginMethod","requestClone","call","isReturnValueProblem","err","thrownError","pluginFilteredRequest","fetchResponse","mode","fetch","debug","status","response","Response","error","fetchWrapper"],"sources":["/Users/aliciamedina/Library/Mobile Documents/com~apple~CloudDocs/Work/Proyecto Fin Grado/Electron/Ionic/Chatty-iOS/node_modules/workbox-core/_private/fetchWrapper.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from './WorkboxError.js';\nimport { logger } from './logger.js';\nimport { assert } from './assert.js';\nimport { getFriendlyURL } from '../_private/getFriendlyURL.js';\nimport { pluginUtils } from '../utils/pluginUtils.js';\nimport '../_version.js';\n/**\n * Wrapper around the fetch API.\n *\n * Will call requestWillFetch on available plugins.\n *\n * @param {Object} options\n * @param {Request|string} options.request\n * @param {Object} [options.fetchOptions]\n * @param {ExtendableEvent} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Response>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst wrappedFetch = async ({ request, fetchOptions, event, plugins = [], }) => {\n    if (typeof request === 'string') {\n        request = new Request(request);\n    }\n    // We *should* be able to call `await event.preloadResponse` even if it's\n    // undefined, but for some reason, doing so leads to errors in our Node unit\n    // tests. To work around that, explicitly check preloadResponse's value first.\n    if (event instanceof FetchEvent && event.preloadResponse) {\n        const possiblePreloadResponse = await event.preloadResponse;\n        if (possiblePreloadResponse) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Using a preloaded navigation response for ` +\n                    `'${getFriendlyURL(request.url)}'`);\n            }\n            return possiblePreloadResponse;\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isInstance(request, Request, {\n            paramName: 'request',\n            expectedClass: Request,\n            moduleName: 'workbox-core',\n            className: 'fetchWrapper',\n            funcName: 'wrappedFetch',\n        });\n    }\n    const failedFetchPlugins = pluginUtils.filter(plugins, \"fetchDidFail\" /* FETCH_DID_FAIL */);\n    // If there is a fetchDidFail plugin, we need to save a clone of the\n    // original request before it's either modified by a requestWillFetch\n    // plugin or before the original request's body is consumed via fetch().\n    const originalRequest = failedFetchPlugins.length > 0 ?\n        request.clone() : null;\n    try {\n        for (const plugin of plugins) {\n            if (\"requestWillFetch\" /* REQUEST_WILL_FETCH */ in plugin) {\n                const pluginMethod = plugin[\"requestWillFetch\" /* REQUEST_WILL_FETCH */];\n                const requestClone = request.clone();\n                request = await pluginMethod.call(plugin, {\n                    request: requestClone,\n                    event,\n                });\n                if (process.env.NODE_ENV !== 'production') {\n                    if (request) {\n                        assert.isInstance(request, Request, {\n                            moduleName: 'Plugin',\n                            funcName: \"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */,\n                            isReturnValueProblem: true,\n                        });\n                    }\n                }\n            }\n        }\n    }\n    catch (err) {\n        throw new WorkboxError('plugin-error-request-will-fetch', {\n            thrownError: err,\n        });\n    }\n    // The request can be altered by plugins with `requestWillFetch` making\n    // the original request (Most likely from a `fetch` event) to be different\n    // to the Request we make. Pass both to `fetchDidFail` to aid debugging.\n    const pluginFilteredRequest = request.clone();\n    try {\n        let fetchResponse;\n        // See https://github.com/GoogleChrome/workbox/issues/1796\n        if (request.mode === 'navigate') {\n            fetchResponse = await fetch(request);\n        }\n        else {\n            fetchResponse = await fetch(request, fetchOptions);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Network request for ` +\n                `'${getFriendlyURL(request.url)}' returned a response with ` +\n                `status '${fetchResponse.status}'.`);\n        }\n        for (const plugin of plugins) {\n            if (\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */ in plugin) {\n                fetchResponse = await plugin[\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */]\n                    .call(plugin, {\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n                if (process.env.NODE_ENV !== 'production') {\n                    if (fetchResponse) {\n                        assert.isInstance(fetchResponse, Response, {\n                            moduleName: 'Plugin',\n                            funcName: \"fetchDidSucceed\" /* FETCH_DID_SUCCEED */,\n                            isReturnValueProblem: true,\n                        });\n                    }\n                }\n            }\n        }\n        return fetchResponse;\n    }\n    catch (error) {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.error(`Network request for ` +\n                `'${getFriendlyURL(request.url)}' threw an error.`, error);\n        }\n        for (const plugin of failedFetchPlugins) {\n            await plugin[\"fetchDidFail\" /* FETCH_DID_FAIL */].call(plugin, {\n                error,\n                event,\n                originalRequest: originalRequest.clone(),\n                request: pluginFilteredRequest.clone(),\n            });\n        }\n        throw error;\n    }\n};\nconst fetchWrapper = {\n    fetch: wrappedFetch,\n};\nexport { fetchWrapper };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}